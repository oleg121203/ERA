const logger = {
const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const readline = require("readline");
const fs = require("fs").promises;
const path = require("path");
const logger = require('./logger');
require("dotenv").config();

// –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
const processArgs = process.argv.slice(2);

// –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function validatePath(path) {
  if (!path || typeof path !== "string") {
    throw new Error("–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
  }
  if (path.includes("..")) {
    throw new Error('–ü—É—Ç—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ".."');
  }
  return path.trim();
}

function validateCode(code) {
  if (!code || typeof code !== "string") {
    throw new Error("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
  }
  if (code.length < 1) {
    throw new Error("–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
  }
  return code.trim();
}

const MODEL_NAME = "gemini-pro";
const API_KEY = process.env.GEMINI_API_KEY;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// –û–±–Ω–æ–≤–ª—è–µ–º helpCommands —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
const helpCommands = {
  "/help": {
    desc: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    examples: [
      "'/help' - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
      "'/help code' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ code",
      "'/help analyze' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞",
    ],
  },
  "/code": {
    desc: "–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞",
    examples: [
      "'/code' - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥",
      "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π:",
      "- Python: class User with authentication",
      "- JavaScript: async function for API calls",
      "- TypeScript: interface for User model",
      "- React: component for data table",
      "- Node.js: Express middleware for logging",
    ],
  },
  "/explain": {
    desc: "–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é",
    examples: [
      "'/explain' - –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
      "–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º:",
      "- JavaScript: Promise, async/await, closure",
      "- React: hooks, virtual DOM, lifecycle",
      "- Node.js: event loop, streams, buffers",
      "- TypeScript: generics, unions, decorators",
      "- Python: generators, decorators, context managers",
    ],
  },
  "/analyze": {
    desc: "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ –æ—à–∏–±–∫–∏",
    examples: [
      "'/analyze' - –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
      "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:",
      "- –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–¥–∞",
      "- –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞",
      "- –ê–Ω–∞–ª–∏–∑ –ø–∞–ø–∫–∏",
    ],
  },
  "/exit": {
    desc: "–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    examples: ["'/exit' - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
  },
  "/analyze-batch": {
    desc: "–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–æ–∫",
    examples: [
      "'/analyze-batch' - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
      "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
      "- ./src/**/*.js --basic --perf",
      "- ./src/main.js,./tests/*.js --all",
      "- ./project --deep --sec",
      "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–ª–∞–≥–∏:",
      "--all: –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏",
      "--basic: –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
      "--deep: –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑",
      "--perf: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "--sec: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
      "--doc: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
    ],
  },
};

async function showHelp() {
  logger.info("\n=== üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ===");
  Object.entries(helpCommands).forEach(([cmd, info]) => {
    logger.info(`\n${cmd}: ${info.desc}`);
    logger.info("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
    info.examples.forEach((ex) => logger.info(`  ${ex}`));
  });
  logger.info(
    "\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –≤ –Ω–∞—á–∞–ª–µ (/help), —Ç–∞–∫ –∏ –≤ –∫–æ–Ω—Ü–µ (help/)"
  );
}

async function handleCodeGeneration(chat) {
  logger.info("\n=== –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ ===");
  logger.info("–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å");

  const prompt = await promptUser("üñ•Ô∏è –ó–∞–¥–∞–Ω–∏–µ: ");
  const result = await chat.sendMessage(`Generate code: ${prompt}`);
  logger.info("\n```\n" + result.response.text() + "\n```\n");
}

async function getAllFiles(dirPath) {
  const files = [];

  async function scan(currentPath) {
    const entries = await fs.readdir(currentPath, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(currentPath, entry.name);
      if (entry.isDirectory()) {
        await scan(fullPath);
      } else {
        files.push(fullPath);
      }
    }
  }

  await scan(dirPath);
  return files;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏
async function getCurrentDirectory() {
  return process.cwd();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π
async function resolvePath(inputPath) {
  if (!inputPath) {
    return process.cwd();
  }

  // –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
  if (!path.isAbsolute(inputPath)) {
    return path.resolve(process.cwd(), inputPath);
  }
  return inputPath;
}

const analyzeCommands = {
  basic: {
    desc: "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
    sections: ["–°–∏–Ω—Ç–∞–∫—Å–∏—Å", "–ò–º–ø–æ—Ä—Ç—ã", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞", "–°—Ç–∏–ª—å", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"],
  },
  deep: {
    desc: "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
    sections: [
      "–°–∏–Ω—Ç–∞–∫—Å–∏—Å",
      "–ò–º–ø–æ—Ä—Ç—ã",
      "–°—Ç—Ä—É–∫—Ç—É—Ä–∞",
      "–°—Ç–∏–ª—å",
      "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
      "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å",
      "–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å",
    ],
  },
  perf: {
    desc: "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    sections: ["–ê–ª–≥–æ—Ä–∏—Ç–º—ã", "–ü–∞–º—è—Ç—å", "–¶–∏–∫–ª—ã", "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å"],
  },
  sec: {
    desc: "–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    sections: ["–£—è–∑–≤–∏–º–æ—Å—Ç–∏", "–í–∞–ª–∏–¥–∞—Ü–∏—è", "–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"],
  },
  doc: {
    desc: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
    sections: ["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "JSDoc", "README", "–ü—Ä–∏–º–µ—Ä—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"],
  },
};

async function handleCodeAnalysis(chat) {
  try {
    logger.info("\n=== –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ ===");
    logger.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:");
    Object.entries(analyzeCommands).forEach(([cmd, info], index) => {
      logger.info(`${index + 1}. ${cmd}: ${info.desc}`);
    });

    const analysisType = await promptUser("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (1-5): ");
    const selectedCommand =
      Object.keys(analyzeCommands)[parseInt(analysisType) - 1];

    if (!selectedCommand) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞");
    }

    logger.info(`\n–í—ã–±—Ä–∞–Ω –∞–Ω–∞–ª–∏–∑: ${analyzeCommands[selectedCommand].desc}`);
    logger.info("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–¥–∞:");
    logger.info("1. –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é");
    logger.info("2. –£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É");
    logger.info("3. –£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)");
    logger.info("4. –í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤");

    const currentDir = await getCurrentDirectory();
    logger.info(`\n–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: ${currentDir}`);
    logger.info("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:");
    logger.info("- –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å (/home/user/project)");
    logger.info("- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (./src –∏–ª–∏ ../project)");
    logger.info("- –¢–æ–ª—å–∫–æ –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n");

    const choice = await promptUser("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-4): ");
    if (!["1", "2", "3", "4"].includes(choice)) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏");
    }

    let files = [];
    let code = "";

    switch (choice) {
      case "1":
        code = validateCode(await promptUser("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: "));
        break;
      case "2":
        const filePath = validatePath(await promptUser("üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: "));
        const resolvedFilePath = await resolvePath(filePath);
        await validateFileAccess(resolvedFilePath);
        files = [resolvedFilePath];
        break;
      case "3":
        const dirPath = await promptUser("üìÅ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ");
        const resolvedDirPath = await resolvePath(dirPath);
        logger.info(`\n–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${resolvedDirPath}`);

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          await fs.access(resolvedDirPath);
          files = await getAllFiles(resolvedDirPath);

          if (files.length === 0) {
            logger.info("‚ö†Ô∏è –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤");
            return;
          }

          logger.info("\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:");
          files.forEach((file, index) => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            const relativePath = path.relative(resolvedDirPath, file);
            logger.info(`${index + 1}. ${relativePath}`);
          });

          const shouldAnalyzeAll =
            (
              await promptUser("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã? (y/n): ")
            ).toLowerCase() === "y";

          if (!shouldAnalyzeAll) {
            const selectedIndexes = (
              await promptUser("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
            ).split(",");
            files = selectedIndexes.map((i) => files[parseInt(i.trim()) - 1]);
          }
        } catch (error) {
          if (error.code === "ENOENT") {
            logger.error(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${resolvedDirPath}`);
          } else {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
          }
          return;
        }
        break;
      case "4":
        const filePaths = (
          await promptUser("üìÇ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
        ).split(",");
        files = filePaths.map((p) => p.trim());
        break;
      default:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
        return;
    }

    const shouldAutofix =
      (
        await promptUser("üîß –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? (y/n): ")
      ).toLowerCase() === "y";

    const analysisPrompt = `
      –í—ã–ø–æ–ª–Ω–∏ ${
        analyzeCommands[selectedCommand].desc
      } –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
      –ü—Ä–æ–≤–µ—Ä—å —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã:
      ${analyzeCommands[selectedCommand].sections
        .map((s) => `- ${s}`)
        .join("\n")}
      
      ${fileName ? `\n–§–∞–π–ª: ${fileName}` : ""}
      
      –ö–æ–¥:
      ${code}
      
      –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é.
    `;

    logger.info(
      `\n‚è≥ –í—ã–ø–æ–ª–Ω—è—é ${analyzeCommands[selectedCommand].desc.toLowerCase()}...`
    );
    const result = await chat.sendMessage(analysisPrompt);
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n" + result.response.text() + "\n");

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    if (selectedCommand === "perf") {
      await analyzePerformance(chat, code);
    } else if (selectedCommand === "sec") {
      await analyzeSecurityIssues(chat, code);
    }

    if (shouldAutofix) {
      await generateFixes(chat, code, selectedCommand);
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    if (error.stack && process.env.DEBUG) {
      logger.error("Stack trace:", error.stack);
    }
  }
}

async function analyzePerformance(chat, code) {
  const perfPrompt = `
    –ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞:
    1. –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (Big O)
    2. –ü–æ–∏—Å–∫ —É–∑–∫–∏—Ö –º–µ—Å—Ç
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤
    4. –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    –ö–æ–¥: ${code}
  `;

  const result = await chat.sendMessage(perfPrompt);
  logger.info("\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n" + result.response.text());
}

async function analyzeSecurityIssues(chat, code) {
  const securityPrompt = `
    –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞:
    1. –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    3. –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    
    –ö–æ–¥: ${code}
  `;

  const result = await chat.sendMessage(securityPrompt);
  logger.info("\nüîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n" + result.response.text());
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
async function validateFileAccess(filepath) {
  try {
    await fs.access(filepath, fs.constants.R_OK);
  } catch (error) {
    if (error.code === "ENOENT") {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filepath}`);
    }
    if (error.code === "EACCES") {
      throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: ${filepath}`);
    }
    throw error;
  }
}

async function analyzeCode(chat, code, shouldAutofix, fileName = "") {
  try {
    code = validateCode(code);

    const analysisPrompt = `
      –í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

      1. –°–ò–ù–¢–ê–ö–°–ò–° –ò –ë–ê–ó–û–í–´–ï –ü–†–û–í–ï–†–ö–ò:
         - –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
         - –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
         - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
         - –û—Ç—Å—Ç—É–ø—ã –∏ –ø—Ä–æ–±–µ–ª—ã
         - –ü–∞—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Å–∫–æ–±–∫–∏, –∫–∞–≤—ã—á–∫–∏)

      2. –ò–ú–ü–û–†–¢–´ –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
         - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
         - –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
         - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
         - –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π
         - –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

      3. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò –°–¢–†–£–ö–¢–£–†–ê:
         - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
         - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
         - –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥ (DRY)
         - –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π
         - –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏

      4. –°–¢–ò–õ–¨ –ö–û–î–ò–†–û–í–ê–ù–ò–Ø:
         - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
         - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö/—Ñ—É–Ω–∫—Ü–∏–π
         - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
         - –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫/—Ñ—É–Ω–∫—Ü–∏–π
         - –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç–∏–ª—è

      5. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
         - –£—è–∑–≤–∏–º–æ—Å—Ç–∏
         - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
         - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
         - –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
         - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

      6. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
         - –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
         - –£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
         - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–∏–∫–ª–æ–≤
         - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
         - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

      7. –¢–ï–°–¢–ò–†–£–ï–ú–û–°–¢–¨:
         - –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
         - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–æ–∫-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         - –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
         - –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
         - –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

      8. –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–¨:
         - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
         - –ì–∏–±–∫–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
         - –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
         - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
         - –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏

      9. –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨:
         - –ö—Ä–æ—Å—Å-–±—Ä–∞—É–∑–µ—Ä–Ω–æ—Å—Ç—å
         - –í–µ—Ä—Å–∏–∏ Node.js/npm
         - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
         - API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
         - –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

      10. –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:
          - –ù–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
          - JSDoc/TypeDoc
          - README —Ñ–∞–π–ª—ã
          - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é

      ${
        shouldAutofix
          ? `
      11. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:
          - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
          - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
          - –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
          - –ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      `
          : ""
      }

      ${fileName ? `\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª: ${fileName}` : ""}
      
      –ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
      ${code}
      
      –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    `;

    logger.info("\n‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...");
    const result = await chat.sendMessage(analysisPrompt);
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n" + result.response.text() + "\n");

    if (shouldAutofix) {
      const fixPrompt = `
        –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞:
        1. –ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        3. –£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å
        4. –î–æ–±–∞–≤—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        5. –ü—Ä–∏–º–µ–Ω–∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

        –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
        ${code}
        
        –í–µ—Ä–Ω–∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø–æ –≤–Ω–µ—Å–µ–Ω–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.
      `;

      logger.info("\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞...");
      const fixResult = await chat.sendMessage(fixPrompt);
      logger.info("\nüîß –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥:\n" + fixResult.response.text() + "\n");
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    throw error;
  }
}

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
function parseAnalysisArgs(input) {
  const args = input.split(" ");
  const paths = [];
  const checks = new Set();

  args.forEach((arg) => {
    if (arg.startsWith("--")) {
      const check = arg.slice(2);
      if (check === "all") {
        Object.keys(analyzeCommands).forEach((cmd) => checks.add(cmd));
      } else if (analyzeCommands[check]) {
        checks.add(check);
      }
    } else {
      paths.push(arg);
    }
  });

  return {
    paths: paths.length > 0 ? paths[0].split(",") : [],
    checks: Array.from(checks),
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è parseCLIArgs
function parseCLIArgs(args) {
  if (!args || args.length === 0) {
    return null;
  }

  const command = args[0];
  const options = {
    paths: [],
    checks: new Set(),
    autofix: false,
  };

  for (let i = 1; i < args.length; i++) {
    const arg = args[i];
    if (arg.startsWith("--")) {
      const flag = arg.slice(2);
      if (flag === "autofix") {
        options.autofix = true;
      } else if (flag === "all") {
        Object.keys(analyzeCommands).forEach((cmd) => options.checks.add(cmd));
      } else if (analyzeCommands[flag]) {
        options.checks.add(flag);
      }
    } else {
      options.paths.push(arg);
    }
  }

  return {
    command,
    options: {
      ...options,
      checks: Array.from(options.checks),
    },
  };
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function showProgress(current, total, label = "–ü—Ä–æ–≥—Ä–µ—Å—Å") {
  const width = 30;
  const progress = Math.round((current / total) * width);
  const percentage = Math.round((current / total) * 100);

  const bar = "‚ñà".repeat(progress) + "‚ñë".repeat(width - progress);
  logger.info(`\r${label}: [${bar}] ${percentage}% (${current}/${total})`);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é analyzeFile —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
async function analyzeFile(chat, filePath, checks, shouldAutofix) {
  try {
    logger.info(`\nüìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    const code = await fs.readFile(filePath, "utf8");

    logger.info("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:");
    logger.info(`- –†–∞–∑–º–µ—Ä: ${(code.length / 1024).toFixed(2)} KB`);
    logger.info(`- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${code.split("\n").length}`);

    const results = {
      issues: 0,
      warnings: 0,
      suggestions: 0,
    };

    logger.info("\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:");
    checks.forEach((check) => {
      logger.info(`‚úì ${analyzeCommands[check].desc}`);
    });

    for (let i = 0; i < checks.length; i++) {
      const check = checks[i];
      showProgress(i + 1, checks.length, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫");

      logger.info(`\n‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ${analyzeCommands[check].desc}...`);

      if (check === "perf") {
        await analyzePerformance(chat, code);
      } else if (check === "sec") {
        await analyzeSecurityIssues(chat, code);
      } else {
        const result = await chat.sendMessage(`
          –í—ã–ø–æ–ª–Ω–∏ ${analyzeCommands[check].desc} –¥–ª—è —Ñ–∞–π–ª–∞ ${path.basename(
          filePath
        )}:
          ${analyzeCommands[check].sections.map((s) => `- ${s}`).join("\n")}
          
          –ö–æ–¥:
          ${code}

          –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
          {
            "issues": [—Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º],
            "warnings": [—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π],
            "suggestions": [—Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π],
            "analysis": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
          }
        `);

        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const analysisResult = result.response.text();
        try {
          const parsed = JSON.parse(analysisResult);
          results.issues += parsed.issues?.length || 0;
          results.warnings += parsed.warnings?.length || 0;
          results.suggestions += parsed.suggestions?.length || 0;
        } catch {
          logger.info("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", analysisResult);
        }
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("\nüìä –ò—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞:");
    logger.info(`- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${results.issues}`);
    logger.info(`- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${results.warnings}`);
    logger.info(`- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${results.suggestions}`);

    if (shouldAutofix) {
      logger.info("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...");
      await generateFixes(chat, code, "all");
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleBatchAnalysis
async function handleBatchAnalysis(chat, cliArgs = null) {
  try {
    let paths = [];
    let checks = [];
    let shouldAutofix = false;

    if (cliArgs) {
      logger.info("–ê–Ω–∞–ª–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏...");
      const parseResult = parseCLIArgs(cliArgs.split(" "));
      if (!parseResult) {
        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏");
      }
      const { options } = parseResult;
      paths = options.paths;
      checks = options.checks;
      shouldAutofix = options.autofix || false;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø—É—Ç–∏
      if (paths.length === 0) {
        throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø—É—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
      }

      logger.info(`–ù–∞–π–¥–µ–Ω–æ –ø—É—Ç–µ–π: ${paths.length}`);
      logger.info(`–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${checks.join(", ")}`);
      logger.info(
        `–ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${shouldAutofix ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"}`
      );
    }

    // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...", "progress");
    let allFiles = [];

    for (const pathPattern of paths) {
      logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏: ${pathPattern}`);
      const resolvedPath = await resolvePath(pathPattern);
      logger.info(`–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${resolvedPath}`);

      try {
        const stats = await fs.stat(resolvedPath);

        if (stats.isDirectory()) {
          logger.info(`–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${resolvedPath}...`);
          const files = await getAllFiles(resolvedPath);
          allFiles = allFiles.concat(files);
          logger.info(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${files.length}`);
        } else {
          allFiles.push(resolvedPath);
          logger.info(`–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${resolvedPath}`);
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–∏ ${pathPattern}: ${error.message}`);
      }
    }

    if (allFiles.length === 0 && paths.length > 0) {
      throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
    }

    logger.info(`\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}`, "success");

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    for (let i = 0; i < allFiles.length; i++) {
      const file = allFiles[i];
      logger.info( 
        `\n–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (${i + 1}/${allFiles.length}): ${file}`,
        "progress"
      );
      await analyzeFile(chat, file, checks, shouldAutofix);
    }

    logger.info("\n–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", "success");
  } catch (error) {
    logger.error(error.message, "error");
    if (process.env.DEBUG === 'true') {
      logger.error("Stack trace:", error.stack);
    }
    process.exit(1);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
async function analyzeFile(chat, filePath, checks, shouldAutofix) {
  try {
    const fileStats = await fs.stat(filePath);
    const code = await fs.readFile(filePath, "utf8");

    logger.info("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:");
    logger.info(`- –ò–º—è: ${path.basename(filePath)}`);
    logger.info(`- –†–∞–∑–º–µ—Ä: ${(fileStats.size / 1024).toFixed(2)} KB`);
    logger.info(`- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${code.split("\n").length}`);
    logger.info(`- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${fileStats.mtime}`);

    const results = {
      issues: 0,
      warnings: 0,
      suggestions: 0,
    };

    logger.info("\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:");
    checks.forEach((check) => {
      logger.info(`‚úì ${analyzeCommands[check].desc}`);
    });

    for (let i = 0; i < checks.length; i++) {
      const check = checks[i];
      showProgress(i + 1, checks.length, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫");

      logger.info(`\n‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ${analyzeCommands[check].desc}...`);

      if (check === "perf") {
        await analyzePerformance(chat, code);
      } else if (check === "sec") {
        await analyzeSecurityIssues(chat, code);
      } else {
        const result = await chat.sendMessage(`
          –í—ã–ø–æ–ª–Ω–∏ ${analyzeCommands[check].desc} –¥–ª—è —Ñ–∞–π–ª–∞ ${path.basename(
          filePath
        )}:
          ${analyzeCommands[check].sections.map((s) => `- ${s}`).join("\n")}
          
          –ö–æ–¥:
          ${code}

          –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
          {
            "issues": [—Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º],
            "warnings": [—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π],
            "suggestions": [—Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π],
            "analysis": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
          }
        `);

        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const analysisResult = result.response.text();
        try {
          const parsed = JSON.parse(analysisResult);
          results.issues += parsed.issues?.length || 0;
          results.warnings += parsed.warnings?.length || 0;
          results.suggestions += parsed.suggestions?.length || 0;
        } catch {
          logger.info("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", analysisResult);
        }
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("\nüìä –ò—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞:");
    logger.info(`- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${results.issues}`);
    logger.info(`- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${results.warnings}`);
    logger.info(`- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${results.suggestions}`);

    if (shouldAutofix) {
      logger.info("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...");
      await generateFixes(chat, code, "all");
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`, "error");
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º main –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ CLI
async function main() {
  try {
    if (processArgs.length > 0) {
      const { command, options } = parseCLIArgs(processArgs);

      const genAI = new GoogleGenerativeAI(API_KEY);
      const model = genAI.getGenerativeModel({ model: MODEL_NAME });
      const chat = model.startChat({
        generationConfig: { maxOutputTokens: 2048 },
        safetySettings: [
          {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
          },
        ],
      });

      switch (command) {
        case "analyze-batch":
          await handleBatchAnalysis(chat, processArgs.slice(1).join(" "));
          break;
        case "analyze":
          if (options.paths.length === 1) {
            const code = await fs.readFile(options.paths[0], "utf8");
            await analyzeCode(
              chat,
              code,
              options.autofix,
              path.basename(options.paths[0])
            );
          }
          break;
        case "help":
          await showHelp();
          break;
        default:
          logger.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:", command);
          process.exit(1);
      }
      rl.close();
      return;
    }

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    logger.info("\nü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini AI Assistant!");

    while (true) {
      logger.info("\n=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===");
      logger.info("1. üí≠ Chat —Ä–µ–∂–∏–º");
      logger.info("2. üöÄ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å");
      logger.info("3. üëã –í—ã—Ö–æ–¥");

      const choice = await promptUser("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ");

      switch (choice) {
        case "1":
          await runChat();
          break;
        case "2":
          const prompt = await promptUser("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å: ");
          await makeDirectRequest(prompt);
          break;
        case "3":
          logger.info("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
          rl.close();
          return;
        default:
          logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    }
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    rl.close();
  }
}

main();
const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const readline = require("readline");
const fs = require("fs").promises;
const path = require("path");
const logger = require('./logger');
require("dotenv").config();

// –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
const processArgs = process.argv.slice(2);

// –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function validatePath(path) {
  if (!path || typeof path !== "string") {
    throw new Error("–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
  }
  if (path.includes("..")) {
    throw new Error('–ü—É—Ç—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ".."');
  }
  return path.trim();
}

function validateCode(code) {
  if (!code || typeof code !== "string") {
    throw new Error("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
  }
  if (code.length < 1) {
    throw new Error("–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
  }
  return code.trim();
}

const MODEL_NAME = "gemini-pro";
const API_KEY = process.env.GEMINI_API_KEY;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// –û–±–Ω–æ–≤–ª—è–µ–º helpCommands —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
const helpCommands = {
  "/help": {
    desc: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    examples: [
      "'/help' - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
      "'/help code' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ code",
      "'/help analyze' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞",
    ],
  },
  "/code": {
    desc: "–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞",
    examples: [
      "'/code' - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥",
      "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π:",
      "- Python: class User with authentication",
      "- JavaScript: async function for API calls",
      "- TypeScript: interface for User model",
      "- React: component for data table",
      "- Node.js: Express middleware for logging",
    ],
  },
  "/explain": {
    desc: "–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é",
    examples: [
      "'/explain' - –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
      "–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º:",
      "- JavaScript: Promise, async/await, closure",
      "- React: hooks, virtual DOM, lifecycle",
      "- Node.js: event loop, streams, buffers",
      "- TypeScript: generics, unions, decorators",
      "- Python: generators, decorators, context managers",
    ],
  },
  "/analyze": {
    desc: "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ –æ—à–∏–±–∫–∏",
    examples: [
      "'/analyze' - –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
      "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:",
      "- –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–¥–∞",
      "- –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞",
      "- –ê–Ω–∞–ª–∏–∑ –ø–∞–ø–∫–∏",
    ],
  },
  "/exit": {
    desc: "–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    examples: ["'/exit' - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
  },
  "/analyze-batch": {
    desc: "–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–æ–∫",
    examples: [
      "'/analyze-batch' - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
      "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
      "- ./src/**/*.js --basic --perf",
      "- ./src/main.js,./tests/*.js --all",
      "- ./project --deep --sec",
      "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–ª–∞–≥–∏:",
      "--all: –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏",
      "--basic: –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
      "--deep: –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑",
      "--perf: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "--sec: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
      "--doc: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
    ],
  },
};

async function showHelp() {
  logger.info("\n=== üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ===");
  Object.entries(helpCommands).forEach(([cmd, info]) => {
    logger.info(`\n${cmd}: ${info.desc}`);
    logger.info("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
    info.examples.forEach((ex) => logger.info(`  ${ex}`));
  });
  logger.info(
    "\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –≤ –Ω–∞—á–∞–ª–µ (/help), —Ç–∞–∫ –∏ –≤ –∫–æ–Ω—Ü–µ (help/)"
  );
}

async function handleCodeGeneration(chat) {
  logger.info("\n=== –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ ===");
  logger.info("–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å");

  const prompt = await promptUser("üñ•Ô∏è –ó–∞–¥–∞–Ω–∏–µ: ");
  const result = await chat.sendMessage(`Generate code: ${prompt}`);
  logger.info("\n```\n" + result.response.text() + "\n```\n");
}

async function getAllFiles(dirPath) {
  const files = [];

  async function scan(currentPath) {
    const entries = await fs.readdir(currentPath, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(currentPath, entry.name);
      if (entry.isDirectory()) {
        await scan(fullPath);
      } else {
        files.push(fullPath);
      }
    }
  }

  await scan(dirPath);
  return files;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏
async function getCurrentDirectory() {
  return process.cwd();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π
async function resolvePath(inputPath) {
  if (!inputPath) {
    return process.cwd();
  }

  // –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
  if (!path.isAbsolute(inputPath)) {
    return path.resolve(process.cwd(), inputPath);
  }
  return inputPath;
}

const analyzeCommands = {
  basic: {
    desc: "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
    sections: ["–°–∏–Ω—Ç–∞–∫—Å–∏—Å", "–ò–º–ø–æ—Ä—Ç—ã", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞", "–°—Ç–∏–ª—å", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"],
  },
  deep: {
    desc: "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
    sections: [
      "–°–∏–Ω—Ç–∞–∫—Å–∏—Å",
      "–ò–º–ø–æ—Ä—Ç—ã",
      "–°—Ç—Ä—É–∫—Ç—É—Ä–∞",
      "–°—Ç–∏–ª—å",
      "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
      "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å",
      "–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å",
    ],
  },
  perf: {
    desc: "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    sections: ["–ê–ª–≥–æ—Ä–∏—Ç–º—ã", "–ü–∞–º—è—Ç—å", "–¶–∏–∫–ª—ã", "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å"],
  },
  sec: {
    desc: "–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    sections: ["–£—è–∑–≤–∏–º–æ—Å—Ç–∏", "–í–∞–ª–∏–¥–∞—Ü–∏—è", "–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"],
  },
  doc: {
    desc: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
    sections: ["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "JSDoc", "README", "–ü—Ä–∏–º–µ—Ä—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"],
  },
};

async function handleCodeAnalysis(chat) {
  try {
    logger.info("\n=== –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ ===");
    logger.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:");
    Object.entries(analyzeCommands).forEach(([cmd, info], index) => {
      logger.info(`${index + 1}. ${cmd}: ${info.desc}`);
    });

    const analysisType = await promptUser("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (1-5): ");
    const selectedCommand =
      Object.keys(analyzeCommands)[parseInt(analysisType) - 1];

    if (!selectedCommand) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞");
    }

    logger.info(`\n–í—ã–±—Ä–∞–Ω –∞–Ω–∞–ª–∏–∑: ${analyzeCommands[selectedCommand].desc}`);
    logger.info("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–¥–∞:");
    logger.info("1. –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é");
    logger.info("2. –£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É");
    logger.info("3. –£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)");
    logger.info("4. –í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤");

    const currentDir = await getCurrentDirectory();
    logger.info(`\n–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: ${currentDir}`);
    logger.info("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:");
    logger.info("- –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å (/home/user/project)");
    logger.info("- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (./src –∏–ª–∏ ../project)");
    logger.info("- –¢–æ–ª—å–∫–æ –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n");

    const choice = await promptUser("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-4): ");
    if (!["1", "2", "3", "4"].includes(choice)) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏");
    }

    let files = [];
    let code = "";

    switch (choice) {
      case "1":
        code = validateCode(await promptUser("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: "));
        break;
      case "2":
        const filePath = validatePath(await promptUser("üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: "));
        const resolvedFilePath = await resolvePath(filePath);
        await validateFileAccess(resolvedFilePath);
        files = [resolvedFilePath];
        break;
      case "3":
        const dirPath = await promptUser("üìÅ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ");
        const resolvedDirPath = await resolvePath(dirPath);
        logger.info(`\n–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${resolvedDirPath}`);

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          await fs.access(resolvedDirPath);
          files = await getAllFiles(resolvedDirPath);

          if (files.length === 0) {
            logger.info("‚ö†Ô∏è –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤");
            return;
          }

          logger.info("\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:");
          files.forEach((file, index) => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            const relativePath = path.relative(resolvedDirPath, file);
            logger.info(`${index + 1}. ${relativePath}`);
          });

          const shouldAnalyzeAll =
            (
              await promptUser("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã? (y/n): ")
            ).toLowerCase() === "y";

          if (!shouldAnalyzeAll) {
            const selectedIndexes = (
              await promptUser("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
            ).split(",");
            files = selectedIndexes.map((i) => files[parseInt(i.trim()) - 1]);
          }
        } catch (error) {
          if (error.code === "ENOENT") {
            logger.error(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${resolvedDirPath}`);
          } else {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
          }
          return;
        }
        break;
      case "4":
        const filePaths = (
          await promptUser("üìÇ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
        ).split(",");
        files = filePaths.map((p) => p.trim());
        break;
      default:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
        return;
    }

    const shouldAutofix =
      (
        await promptUser("üîß –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? (y/n): ")
      ).toLowerCase() === "y";

    const analysisPrompt = `
      –í—ã–ø–æ–ª–Ω–∏ ${
        analyzeCommands[selectedCommand].desc
      } –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
      –ü—Ä–æ–≤–µ—Ä—å —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã:
      ${analyzeCommands[selectedCommand].sections
        .map((s) => `- ${s}`)
        .join("\n")}
      
      ${fileName ? `\n–§–∞–π–ª: ${fileName}` : ""}
      
      –ö–æ–¥:
      ${code}
      
      –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é.
    `;

    logger.info(
      `\n‚è≥ –í—ã–ø–æ–ª–Ω—è—é ${analyzeCommands[selectedCommand].desc.toLowerCase()}...`
    );
    const result = await chat.sendMessage(analysisPrompt);
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n" + result.response.text() + "\n");

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    if (selectedCommand === "perf") {
      await analyzePerformance(chat, code);
    } else if (selectedCommand === "sec") {
      await analyzeSecurityIssues(chat, code);
    }

    if (shouldAutofix) {
      await generateFixes(chat, code, selectedCommand);
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    if (error.stack && process.env.DEBUG) {
      logger.error("Stack trace:", error.stack);
    }
  }
}

async function analyzePerformance(chat, code) {
  const perfPrompt = `
    –ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞:
    1. –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (Big O)
    2. –ü–æ–∏—Å–∫ —É–∑–∫–∏—Ö –º–µ—Å—Ç
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤
    4. –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    –ö–æ–¥: ${code}
  `;

  const result = await chat.sendMessage(perfPrompt);
  logger.info("\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n" + result.response.text());
}

async function analyzeSecurityIssues(chat, code) {
  const securityPrompt = `
    –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞:
    1. –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    3. –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    
    –ö–æ–¥: ${code}
  `;

  const result = await chat.sendMessage(securityPrompt);
  logger.info("\nüîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n" + result.response.text());
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
async function validateFileAccess(filepath) {
  try {
    await fs.access(filepath, fs.constants.R_OK);
  } catch (error) {
    if (error.code === "ENOENT") {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filepath}`);
    }
    if (error.code === "EACCES") {
      throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: ${filepath}`);
    }
    throw error;
  }
}

async function analyzeCode(chat, code, shouldAutofix, fileName = "") {
  try {
    code = validateCode(code);

    const analysisPrompt = `
      –í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

      1. –°–ò–ù–¢–ê–ö–°–ò–° –ò –ë–ê–ó–û–í–´–ï –ü–†–û–í–ï–†–ö–ò:
         - –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
         - –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
         - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
         - –û—Ç—Å—Ç—É–ø—ã –∏ –ø—Ä–æ–±–µ–ª—ã
         - –ü–∞—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Å–∫–æ–±–∫–∏, –∫–∞–≤—ã—á–∫–∏)

      2. –ò–ú–ü–û–†–¢–´ –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
         - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
         - –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
         - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
         - –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π
         - –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

      3. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò –°–¢–†–£–ö–¢–£–†–ê:
         - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
         - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
         - –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥ (DRY)
         - –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π
         - –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏

      4. –°–¢–ò–õ–¨ –ö–û–î–ò–†–û–í–ê–ù–ò–Ø:
         - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
         - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö/—Ñ—É–Ω–∫—Ü–∏–π
         - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
         - –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫/—Ñ—É–Ω–∫—Ü–∏–π
         - –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç–∏–ª—è

      5. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
         - –£—è–∑–≤–∏–º–æ—Å—Ç–∏
         - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
         - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
         - –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
         - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

      6. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
         - –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
         - –£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
         - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–∏–∫–ª–æ–≤
         - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
         - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

      7. –¢–ï–°–¢–ò–†–£–ï–ú–û–°–¢–¨:
         - –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
         - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–æ–∫-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         - –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
         - –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
         - –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

      8. –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–¨:
         - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
         - –ì–∏–±–∫–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
         - –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
         - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
         - –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏

      9. –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨:
         - –ö—Ä–æ—Å—Å-–±—Ä–∞—É–∑–µ—Ä–Ω–æ—Å—Ç—å
         - –í–µ—Ä—Å–∏–∏ Node.js/npm
         - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
         - API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
         - –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

      10. –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:
          - –ù–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
          - JSDoc/TypeDoc
          - README —Ñ–∞–π–ª—ã
          - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é

      ${
        shouldAutofix
          ? `
      11. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:
          - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
          - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
          - –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
          - –ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      `
          : ""
      }

      ${fileName ? `\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª: ${fileName}` : ""}
      
      –ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
      ${code}
      
      –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    `;

    logger.info("\n‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...");
    const result = await chat.sendMessage(analysisPrompt);
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n" + result.response.text() + "\n");

    if (shouldAutofix) {
      const fixPrompt = `
        –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞:
        1. –ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        3. –£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å
        4. –î–æ–±–∞–≤—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        5. –ü—Ä–∏–º–µ–Ω–∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

        –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
        ${code}
        
        –í–µ—Ä–Ω–∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø–æ –≤–Ω–µ—Å–µ–Ω–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.
      `;

      logger.info("\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞...");
      const fixResult = await chat.sendMessage(fixPrompt);
      logger.info("\nüîß –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥:\n" + fixResult.response.text() + "\n");
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    throw error;
  }
}

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
function parseAnalysisArgs(input) {
  const args = input.split(" ");
  const paths = [];
  const checks = new Set();

  args.forEach((arg) => {
    if (arg.startsWith("--")) {
      const check = arg.slice(2);
      if (check === "all") {
        Object.keys(analyzeCommands).forEach((cmd) => checks.add(cmd));
      } else if (analyzeCommands[check]) {
        checks.add(check);
      }
    } else {
      paths.push(arg);
    }
  });

  return {
    paths: paths.length > 0 ? paths[0].split(",") : [],
    checks: Array.from(checks),
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è parseCLIArgs
function parseCLIArgs(args) {
  if (!args || args.length === 0) {
    return null;
  }

  const command = args[0];
  const options = {
    paths: [],
    checks: new Set(),
    autofix: false,
  };

  for (let i = 1; i < args.length; i++) {
    const arg = args[i];
    if (arg.startsWith("--")) {
      const flag = arg.slice(2);
      if (flag === "autofix") {
        options.autofix = true;
      } else if (flag === "all") {
        Object.keys(analyzeCommands).forEach((cmd) => options.checks.add(cmd));
      } else if (analyzeCommands[flag]) {
        options.checks.add(flag);
      }
    } else {
      options.paths.push(arg);
    }
  }

  return {
    command,
    options: {
      ...options,
      checks: Array.from(options.checks),
    },
  };
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function showProgress(current, total, label = "–ü—Ä–æ–≥—Ä–µ—Å—Å") {
  const width = 30;
  const progress = Math.round((current / total) * width);
  const percentage = Math.round((current / total) * 100);

  const bar = "‚ñà".repeat(progress) + "‚ñë".repeat(width - progress);
  logger.info(`\r${label}: [${bar}] ${percentage}% (${current}/${total})`);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é analyzeFile —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
async function analyzeFile(chat, filePath, checks, shouldAutofix) {
  try {
    logger.info(`\nüìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    const code = await fs.readFile(filePath, "utf8");

    logger.info("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:");
    logger.info(`- –†–∞–∑–º–µ—Ä: ${(code.length / 1024).toFixed(2)} KB`);
    logger.info(`- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${code.split("\n").length}`);

    const results = {
      issues: 0,
      warnings: 0,
      suggestions: 0,
    };

    logger.info("\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:");
    checks.forEach((check) => {
      logger.info(`‚úì ${analyzeCommands[check].desc}`);
    });

    for (let i = 0; i < checks.length; i++) {
      const check = checks[i];
      showProgress(i + 1, checks.length, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫");

      logger.info(`\n‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ${analyzeCommands[check].desc}...`);

      if (check === "perf") {
        await analyzePerformance(chat, code);
      } else if (check === "sec") {
        await analyzeSecurityIssues(chat, code);
      } else {
        const result = await chat.sendMessage(`
          –í—ã–ø–æ–ª–Ω–∏ ${analyzeCommands[check].desc} –¥–ª—è —Ñ–∞–π–ª–∞ ${path.basename(
          filePath
        )}:
          ${analyzeCommands[check].sections.map((s) => `- ${s}`).join("\n")}
          
          –ö–æ–¥:
          ${code}

          –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
          {
            "issues": [—Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º],
            "warnings": [—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π],
            "suggestions": [—Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π],
            "analysis": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
          }
        `);

        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const analysisResult = result.response.text();
        try {
          const parsed = JSON.parse(analysisResult);
          results.issues += parsed.issues?.length || 0;
          results.warnings += parsed.warnings?.length || 0;
          results.suggestions += parsed.suggestions?.length || 0;
        } catch {
          logger.info("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", analysisResult);
        }
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("\nüìä –ò—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞:");
    logger.info(`- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${results.issues}`);
    logger.info(`- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${results.warnings}`);
    logger.info(`- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${results.suggestions}`);

    if (shouldAutofix) {
      logger.info("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...");
      await generateFixes(chat, code, "all");
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleBatchAnalysis
async function handleBatchAnalysis(chat, cliArgs = null) {
  try {
    let paths = [];
    let checks = [];
    let shouldAutofix = false;

    if (cliArgs) {
      logger.info("–ê–Ω–∞–ª–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏...");
      const parseResult = parseCLIArgs(cliArgs.split(" "));
      if (!parseResult) {
        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏");
      }
      const { options } = parseResult;
      paths = options.paths;
      checks = options.checks;
      shouldAutofix = options.autofix || false;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø—É—Ç–∏
      if (paths.length === 0) {
        throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø—É—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
      }

      logger.info(`–ù–∞–π–¥–µ–Ω–æ –ø—É—Ç–µ–π: ${paths.length}`);
      logger.info(`–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${checks.join(", ")}`);
      logger.info(
        `–ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${shouldAutofix ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"}`
      );
    }

    // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...", "progress");
    let allFiles = [];

    for (const pathPattern of paths) {
      logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏: ${pathPattern}`);
      const resolvedPath = await resolvePath(pathPattern);
      logger.info(`–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${resolvedPath}`);

      try {
        const stats = await fs.stat(resolvedPath);

        if (stats.isDirectory()) {
          logger.info(`–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${resolvedPath}...`);
          const files = await getAllFiles(resolvedPath);
          allFiles = allFiles.concat(files);
          logger.info(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${files.length}`);
        } else {
          allFiles.push(resolvedPath);
          logger.info(`–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${resolvedPath}`);
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–∏ ${pathPattern}: ${error.message}`);
      }
    }

    if (allFiles.length === 0 && paths.length > 0) {
      throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
    }

    logger.info(`\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}`, "success");

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    for (let i = 0; i < allFiles.length; i++) {
      const file = allFiles[i];
      logger.info( 
        `\n–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (${i + 1}/${allFiles.length}): ${file}`,
        "progress"
      );
      await analyzeFile(chat, file, checks, shouldAutofix);
    }

    logger.info("\n–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", "success");
  } catch (error) {
    logger.error(error.message, "error");
    if (process.env.DEBUG === 'true') {
      logger.error("Stack trace:", error.stack);
    }
    process.exit(1);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
async function analyzeFile(chat, filePath, checks, shouldAutofix) {
  try {
    const fileStats = await fs.stat(filePath);
    const code = await fs.readFile(filePath, "utf8");

    logger.info("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:");
    logger.info(`- –ò–º—è: ${path.basename(filePath)}`);
    logger.info(`- –†–∞–∑–º–µ—Ä: ${(fileStats.size / 1024).toFixed(2)} KB`);
    logger.info(`- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${code.split("\n").length}`);
    logger.info(`- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${fileStats.mtime}`);

    const results = {
      issues: 0,
      warnings: 0,
      suggestions: 0,
    };

    logger.info("\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:");
    checks.forEach((check) => {
      logger.info(`‚úì ${analyzeCommands[check].desc}`);
    });

    for (let i = 0; i < checks.length; i++) {
      const check = checks[i];
      showProgress(i + 1, checks.length, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫");

      logger.info(`\n‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ${–∞–ΩalyzeCommands[check].desc}...`);

      if (check === "perf") {
        await analyzePerformance(chat, code);
      } else if (check === "sec") {
        await analyzeSecurityIssues(chat, code);
      } else {
        const result = await chat.sendMessage(`
          –í—ã–ø–æ–ª–Ω–∏ ${–∞–ΩalyzeCommands[check].desc} –¥–ª—è —Ñ–∞–π–ª–∞ ${path.basename(
          filePath
        )}:
          ${analyzeCommands[check].sections.map((s) => `- ${s}`).join("\n")}
          
          –ö–æ–¥:
          ${code}

          –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
          {
            "issues": [—Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º],
            "warnings": [—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π],
            "suggestions": [—Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π],
            "analysis": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
          }
        `);

        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const analysisResult = result.response.text();
        try {
          const parsed = JSON.parse(analysisResult);
          results.issues += parsed.issues?.length || 0;
          results.warnings += parsed.warnings?.length || 0;
          results.suggestions += parsed.suggestions?.length || 0;
        } catch {
          logger.info("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", analysisResult);
        }
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("\nüìä –ò—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞:");
    logger.info(`- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${results.issues}`);
    logger.info(`- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${results.warnings}`);
    logger.info(`- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${results.suggestions}`);

    if (shouldAutofix) {
      logger.info("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...");
      await generateFixes(chat, code, "all");
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`, "error");
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º main –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ CLI
async function main() {
  try {
    if (processArgs.length > 0) {
      const { command, options } = parseCLIArgs(processArgs);

      const genAI = new GoogleGenerativeAI(API_KEY);
      const model = genAI.getGenerativeModel({ model: MODEL_NAME });
      const chat = model.startChat({
        generationConfig: { maxOutputTokens: 2048 },
        safetySettings: [
          {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
          },
        ],
      });

      switch (command) {
        case "analyze-batch":
          await handleBatchAnalysis(chat, processArgs.slice(1).join(" "));
          break;
        case "analyze":
          if (options.paths.length === 1) {
            const code = await fs.readFile(options.paths[0], "utf8");
            await analyzeCode(
              chat,
              code,
              options.autofix,
              path.basename(options.paths[0])
            );
          }
          break;
        case "help":
          await showHelp();
          break;
        default:
          logger.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:", command);
          process.exit(1);
      }
      rl.close();
      return;
    }

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    logger.info("\nü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini AI Assistant!");

    while (true) {
      logger.info("\n=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===");
      logger.info("1. üí≠ Chat —Ä–µ–∂–∏–º");
      logger.info("2. üöÄ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å");
      logger.info("3. üëã –í—ã—Ö–æ–¥");

      const choice = await promptUser("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ");

      switch (choice) {
        case "1":
          await runChat();
          break;
        case "2":
          const prompt = await promptUser("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å: ");
          await makeDirectRequest(prompt);
          break;
        case "3":
          logger.info("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
          rl.close();
          return;
        default:
          logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    }
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    rl.close();
  }
}

main();
const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const readline = require("readline");
const fs = require("fs").promises;
const path = require("path");
const logger = require('./logger');
require("dotenv").config();

// –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
const processArgs = process.argv.slice(2);

// –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function validatePath(path) {
  if (!path || typeof path !== "string") {
    throw new Error("–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
  }
  if (path.includes("..")) {
    throw new Error('–ü—É—Ç—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ".."');
  }
  return path.trim();
}

function validateCode(code) {
  if (!code || typeof code !== "string") {
    throw new Error("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
  }
  if (code.length < 1) {
    throw new Error("–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
  }
  return code.trim();
}

const MODEL_NAME = "gemini-pro";
const API_KEY = process.env.GEMINI_API_KEY;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// –û–±–Ω–æ–≤–ª—è–µ–º helpCommands —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
const helpCommands = {
  "/help": {
    desc: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    examples: [
      "'/help' - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
      "'/help code' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ code",
      "'/help analyze' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞",
    ],
  },
  "/code": {
    desc: "–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞",
    examples: [
      "'/code' - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥",
      "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π:",
      "- Python: class User with authentication",
      "- JavaScript: async function for API calls",
      "- TypeScript: interface for User model",
      "- React: component for data table",
      "- Node.js: Express middleware for logging",
    ],
  },
  "/explain": {
    desc: "–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é",
    examples: [
      "'/explain' - –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
      "–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º:",
      "- JavaScript: Promise, async/await, closure",
      "- React: hooks, virtual DOM, lifecycle",
      "- Node.js: event loop, streams, buffers",
      "- TypeScript: generics, unions, decorators",
      "- Python: generators, decorators, context managers",
    ],
  },
  "/analyze": {
    desc: "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ –æ—à–∏–±–∫–∏",
    examples: [
      "'/analyze' - –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
      "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:",
      "- –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–¥–∞",
      "- –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞",
      "- –ê–Ω–∞–ª–∏–∑ –ø–∞–ø–∫–∏",
    ],
  },
  "/exit": {
    desc: "–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    examples: ["'/exit' - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
  },
  "/analyze-batch": {
    desc: "–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–æ–∫",
    examples: [
      "'/analyze-batch' - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
      "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
      "- ./src/**/*.js --basic --perf",
      "- ./src/main.js,./tests/*.js --all",
      "- ./project --deep --sec",
      "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–ª–∞–≥–∏:",
      "--all: –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏",
      "--basic: –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
      "--deep: –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑",
      "--perf: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "--sec: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
      "--doc: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
    ],
  },
};

async function showHelp() {
  logger.info("\n=== üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ===");
  Object.entries(helpCommands).forEach(([cmd, info]) => {
    logger.info(`\n${cmd}: ${info.desc}`);
    logger.info("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
    info.examples.forEach((ex) => logger.info(`  ${ex}`));
  });
  logger.info(
    "\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –≤ –Ω–∞—á–∞–ª–µ (/help), —Ç–∞–∫ –∏ –≤ –∫–æ–Ω—Ü–µ (help/)"
  );
}

async function handleCodeGeneration(chat) {
  logger.info("\n=== –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ ===");
  logger.info("–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å");

  const prompt = await promptUser("üñ•Ô∏è –ó–∞–¥–∞–Ω–∏–µ: ");
  const result = await chat.sendMessage(`Generate code: ${prompt}`);
  logger.info("\n```\n" + result.response.text() + "\n```\n");
}

async function getAllFiles(dirPath) {
  const files = [];

  async function scan(currentPath) {
    const entries = await fs.readdir(currentPath, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(currentPath, entry.name);
      if (entry.isDirectory()) {
        await scan(fullPath);
      } else {
        files.push(fullPath);
      }
    }
  }

  await scan(dirPath);
  return files;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏
async function getCurrentDirectory() {
  return process.cwd();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π
async function resolvePath(inputPath) {
  if (!inputPath) {
    return process.cwd();
  }

  // –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
  if (!path.isAbsolute(inputPath)) {
    return path.resolve(process.cwd(), inputPath);
  }
  return inputPath;
}

const analyzeCommands = {
  basic: {
    desc: "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
    sections: ["–°–∏–Ω—Ç–∞–∫—Å–∏—Å", "–ò–º–ø–æ—Ä—Ç—ã", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞", "–°—Ç–∏–ª—å", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"],
  },
  deep: {
    desc: "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
    sections: [
      "–°–∏–Ω—Ç–∞–∫—Å–∏—Å",
      "–ò–º–ø–æ—Ä—Ç—ã",
      "–°—Ç—Ä—É–∫—Ç—É—Ä–∞",
      "–°—Ç–∏–ª—å",
      "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
      "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å",
      "–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å",
    ],
  },
  perf: {
    desc: "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    sections: ["–ê–ª–≥–æ—Ä–∏—Ç–º—ã", "–ü–∞–º—è—Ç—å", "–¶–∏–∫–ª—ã", "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å"],
  },
  sec: {
    desc: "–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    sections: ["–£—è–∑–≤–∏–º–æ—Å—Ç–∏", "–í–∞–ª–∏–¥–∞—Ü–∏—è", "–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"],
  },
  doc: {
    desc: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
    sections: ["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "JSDoc", "README", "–ü—Ä–∏–º–µ—Ä—ã", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"],
  },
};

async function handleCodeAnalysis(chat) {
  try {
    logger.info("\n=== –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ ===");
    logger.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:");
    Object.entries(analyzeCommands).forEach(([cmd, info], index) => {
      logger.info(`${index + 1}. ${cmd}: ${info.desc}`);
    });

    const analysisType = await promptUser("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (1-5): ");
    const selectedCommand =
      Object.keys(analyzeCommands)[parseInt(analysisType) - 1];

    if (!selectedCommand) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞");
    }

    logger.info(`\n–í—ã–±—Ä–∞–Ω –∞–Ω–∞–ª–∏–∑: ${analyzeCommands[selectedCommand].desc}`);
    logger.info("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–¥–∞:");
    logger.info("1. –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é");
    logger.info("2. –£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É");
    logger.info("3. –£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)");
    logger.info("4. –í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤");

    const currentDir = await getCurrentDirectory();
    logger.info(`\n–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: ${currentDir}`);
    logger.info("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:");
    logger.info("- –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å (/home/user/project)");
    logger.info("- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (./src –∏–ª–∏ ../project)");
    logger.info("- –¢–æ–ª—å–∫–æ –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n");

    const choice = await promptUser("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-4): ");
    if (!["1", "2", "3", "4"].includes(choice)) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏");
    }

    let files = [];
    let code = "";

    switch (choice) {
      case "1":
        code = validateCode(await promptUser("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: "));
        break;
      case "2":
        const filePath = validatePath(await promptUser("üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: "));
        const resolvedFilePath = await resolvePath(filePath);
        await validateFileAccess(resolvedFilePath);
        files = [resolvedFilePath];
        break;
      case "3":
        const dirPath = await promptUser("üìÅ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ");
        const resolvedDirPath = await resolvePath(dirPath);
        logger.info(`\n–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${resolvedDirPath}`);

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          await fs.access(resolvedDirPath);
          files = await getAllFiles(resolvedDirPath);

          if (files.length === 0) {
            logger.info("‚ö†Ô∏è –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤");
            return;
          }

          logger.info("\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:");
          files.forEach((file, index) => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            const relativePath = path.relative(resolvedDirPath, file);
            logger.info(`${index + 1}. ${relativePath}`);
          });

          const shouldAnalyzeAll =
            (
              await promptUser("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã? (y/n): ")
            ).toLowerCase() === "y";

          if (!shouldAnalyzeAll) {
            const selectedIndexes = (
              await promptUser("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
            ).split(",");
            files = selectedIndexes.map((i) => files[parseInt(i.trim()) - 1]);
          }
        } catch (error) {
          if (error.code === "ENOENT") {
            logger.error(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${resolvedDirPath}`);
          } else {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
          }
          return;
        }
        break;
      case "4":
        const filePaths = (
          await promptUser("üìÇ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
        ).split(",");
        files = filePaths.map((p) => p.trim());
        break;
      default:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
        return;
    }

    const shouldAutofix =
      (
        await promptUser("üîß –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? (y/n): ")
      ).toLowerCase() === "y";

    const analysisPrompt = `
      –í—ã–ø–æ–ª–Ω–∏ ${
        analyzeCommands[selectedCommand].desc
      } –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
      –ü—Ä–æ–≤–µ—Ä—å —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã:
      ${analyzeCommands[selectedCommand].sections
        .map((s) => `- ${s}`)
        .join("\n")}
      
      ${fileName ? `\n–§–∞–π–ª: ${fileName}` : ""}
      
      –ö–æ–¥:
      ${code}
      
      –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é.
    `;

    logger.info(
      `\n‚è≥ –í—ã–ø–æ–ª–Ω—è—é ${analyzeCommands[selectedCommand].desc.toLowerCase()}...`
    );
    const result = await chat.sendMessage(analysisPrompt);
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n" + result.response.text() + "\n");

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    if (selectedCommand === "perf") {
      await analyzePerformance(chat, code);
    } else if (selectedCommand === "sec") {
      await analyzeSecurityIssues(chat, code);
    }

    if (shouldAutofix) {
      await generateFixes(chat, code, selectedCommand);
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    if (error.stack && process.env.DEBUG) {
      logger.error("Stack trace:", error.stack);
    }
  }
}

async function analyzePerformance(chat, code) {
  const perfPrompt = `
    –ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞:
    1. –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (Big O)
    2. –ü–æ–∏—Å–∫ —É–∑–∫–∏—Ö –º–µ—Å—Ç
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤
    4. –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    –ö–æ–¥: ${code}
  `;

  const result = await chat.sendMessage(perfPrompt);
  logger.info("\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n" + result.response.text());
}

async function analyzeSecurityIssues(chat, code) {
  const securityPrompt = `
    –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞:
    1. –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    3. –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    
    –ö–æ–¥: ${code}
  `;

  const result = await chat.sendMessage(securityPrompt);
  logger.info("\nüîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n" + result.response.text());
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
async function validateFileAccess(filepath) {
  try {
    await fs.access(filepath, fs.constants.R_OK);
  } catch (error) {
    if (error.code === "ENOENT") {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filepath}`);
    }
    if (error.code === "EACCES") {
      throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: ${filepath}`);
    }
    throw error;
  }
}

async function analyzeCode(chat, code, shouldAutofix, fileName = "") {
  try {
    code = validateCode(code);

    const analysisPrompt = `
      –í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

      1. –°–ò–ù–¢–ê–ö–°–ò–° –ò –ë–ê–ó–û–í–´–ï –ü–†–û–í–ï–†–ö–ò:
         - –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
         - –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
         - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
         - –û—Ç—Å—Ç—É–ø—ã –∏ –ø—Ä–æ–±–µ–ª—ã
         - –ü–∞—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Å–∫–æ–±–∫–∏, –∫–∞–≤—ã—á–∫–∏)

      2. –ò–ú–ü–û–†–¢–´ –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
         - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
         - –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
         - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
         - –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π
         - –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

      3. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò –°–¢–†–£–ö–¢–£–†–ê:
         - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
         - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
         - –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥ (DRY)
         - –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π
         - –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏

      4. –°–¢–ò–õ–¨ –ö–û–î–ò–†–û–í–ê–ù–ò–Ø:
         - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
         - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö/—Ñ—É–Ω–∫—Ü–∏–π
         - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
         - –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫/—Ñ—É–Ω–∫—Ü–∏–π
         - –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç–∏–ª—è

      5. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
         - –£—è–∑–≤–∏–º–æ—Å—Ç–∏
         - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
         - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
         - –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
         - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

      6. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
         - –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
         - –£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
         - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–∏–∫–ª–æ–≤
         - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
         - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

      7. –¢–ï–°–¢–ò–†–£–ï–ú–û–°–¢–¨:
         - –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
         - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–æ–∫-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         - –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
         - –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
         - –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

      8. –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–¨:
         - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
         - –ì–∏–±–∫–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
         - –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
         - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
         - –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏

      9. –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨:
         - –ö—Ä–æ—Å—Å-–±—Ä–∞—É–∑–µ—Ä–Ω–æ—Å—Ç—å
         - –í–µ—Ä—Å–∏–∏ Node.js/npm
         - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
         - API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
         - –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

      10. –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:
          - –ù–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
          - JSDoc/TypeDoc
          - README —Ñ–∞–π–ª—ã
          - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é

      ${
        shouldAutofix
          ? `
      11. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:
          - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
          - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
          - –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
          - –ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      `
          : ""
      }

      ${fileName ? `\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª: ${fileName}` : ""}
      
      –ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
      ${code}
      
      –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    `;

    logger.info("\n‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...");
    const result = await chat.sendMessage(analysisPrompt);
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n" + result.response.text() + "\n");

    if (shouldAutofix) {
      const fixPrompt = `
        –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞:
        1. –ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        3. –£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å
        4. –î–æ–±–∞–≤—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        5. –ü—Ä–∏–º–µ–Ω–∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

        –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
        ${code}
        
        –í–µ—Ä–Ω–∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø–æ –≤–Ω–µ—Å–µ–Ω–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.
      `;

      logger.info("\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞...");
      const fixResult = await chat.sendMessage(fixPrompt);
      logger.info("\nüîß –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥:\n" + fixResult.response.text() + "\n");
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    throw error;
  }
}

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
function parseAnalysisArgs(input) {
  const args = input.split(" ");
  const paths = [];
  const checks = new Set();

  args.forEach((arg) => {
    if (arg.startsWith("--")) {
      const check = arg.slice(2);
      if (check === "all") {
        Object.keys(analyzeCommands).forEach((cmd) => checks.add(cmd));
      } else if (analyzeCommands[check]) {
        checks.add(check);
      }
    } else {
      paths.push(arg);
    }
  });

  return {
    paths: paths.length > 0 ? paths[0].split(",") : [],
    checks: Array.from(checks),
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è parseCLIArgs
function parseCLIArgs(args) {
  if (!args || args.length === 0) {
    return null;
  }

  const command = args[0];
  const options = {
    paths: [],
    checks: new Set(),
    autofix: false,
  };

  for (let i = 1; i < args.length; i++) {
    const arg = args[i];
    if (arg.startsWith("--")) {
      const flag = arg.slice(2);
      if (flag === "autofix") {
        options.autofix = true;
      } else if (flag === "all") {
        Object.keys(analyzeCommands).forEach((cmd) => options.checks.add(cmd));
      } else if (analyzeCommands[flag]) {
        options.checks.add(flag);
      }
    } else {
      options.paths.push(arg);
    }
  }

  return {
    command,
    options: {
      ...options,
      checks: Array.from(options.checks),
    },
  };
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function showProgress(current, total, label = "–ü—Ä–æ–≥—Ä–µ—Å—Å") {
  const width = 30;
  const progress = Math.round((current / total) * width);
  const percentage = Math.round((current / total) * 100);

  const bar = "‚ñà".repeat(progress) + "‚ñë".repeat(width - progress);
  logger.info(`\r${label}: [${bar}] ${percentage}% (${current}/${total})`);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é analyzeFile —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
async function analyzeFile(chat, filePath, checks, shouldAutofix) {
  try {
    logger.info(`\nüìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    const code = await fs.readFile(filePath, "utf8");

    logger.info("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:");
    logger.info(`- –†–∞–∑–º–µ—Ä: ${(code.length / 1024).toFixed(2)} KB`);
    logger.info(`- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${code.split("\n").length}`);

    const results = {
      issues: 0,
      warnings: 0,
      suggestions: 0,
    };

    logger.info("\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:");
    checks.forEach((check) => {
      logger.info(`‚úì ${analyzeCommands[check].desc}`);
    });

    for (let i = 0; i < checks.length; i++) {
      const check = checks[i];
      showProgress(i + 1, checks.length, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫");

      logger.info(`\n‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ${analyzeCommands[check].desc}...`);

      if (check === "perf") {
        await analyzePerformance(chat, code);
      } else if (check === "sec") {
        await analyzeSecurityIssues(chat, code);
      } else {
        const result = await chat.sendMessage(`
          –í—ã–ø–æ–ª–Ω–∏ ${analyzeCommands[check].desc} –¥–ª—è —Ñ–∞–π–ª–∞ ${path.basename(
          filePath
        )}:
          ${analyzeCommands[check].sections.map((s) => `- ${s}`).join("\n")}
          
          –ö–æ–¥:
          ${code}

          –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
          {
            "issues": [—Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º],
            "warnings": [—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π],
            "suggestions": [—Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π],
            "analysis": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
          }
        `);

        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const analysisResult = result.response.text();
        try {
          const parsed = JSON.parse(analysisResult);
          results.issues += parsed.issues?.length || 0;
          results.warnings += parsed.warnings?.length || 0;
          results.suggestions += parsed.suggestions?.length || 0;
        } catch {
          logger.info("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", analysisResult);
        }
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("\nüìä –ò—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞:");
    logger.info(`- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${results.issues}`);
    logger.info(`- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${results.warnings}`);
    logger.info(`- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${results.suggestions}`);

    if (shouldAutofix) {
      logger.info("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...");
      await generateFixes(chat, code, "all");
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleBatchAnalysis
async function handleBatchAnalysis(chat, cliArgs = null) {
  try {
    let paths = [];
    let checks = [];
    let shouldAutofix = false;

    if (cliArgs) {
      logger.info("–ê–Ω–∞–ª–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏...");
      const parseResult = parseCLIArgs(cliArgs.split(" "));
      if (!parseResult) {
        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏");
      }
      const { options } = parseResult;
      paths = options.paths;
      checks = options.checks;
      shouldAutofix = options.autofix || false;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø—É—Ç–∏
      if (paths.length === 0) {
        throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø—É—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
      }

      logger.info(`–ù–∞–π–¥–µ–Ω–æ –ø—É—Ç–µ–π: ${paths.length}`);
      logger.info(`–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${checks.join(", ")}`);
      logger.info(
        `–ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${shouldAutofix ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"}`
      );
    }

    // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...", "progress");
    let allFiles = [];

    for (const pathPattern of paths) {
      logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏: ${pathPattern}`);
      const resolvedPath = await resolvePath(pathPattern);
      logger.info(`–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${resolvedPath}`);

      try {
        const stats = await fs.stat(resolvedPath);

        if (stats.isDirectory()) {
          logger.info(`–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${resolvedPath}...`);
          const files = await getAllFiles(resolvedPath);
          allFiles = allFiles.concat(files);
          logger.info(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${files.length}`);
        } else {
          allFiles.push(resolvedPath);
          logger.info(`–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${resolvedPath}`);
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–∏ ${pathPattern}: ${error.message}`);
      }
    }

    if (allFiles.length === 0 && paths.length > 0) {
      throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
    }

    logger.info(`\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}`, "success");

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    for (let i = 0; i < allFiles.length; i++) {
      const file = allFiles[i];
      logger.info( 
        `\n–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (${i + 1}/${allFiles.length}): ${file}`,
        "progress"
      );
      await analyzeFile(chat, file, checks, shouldAutofix);
    }

    logger.info("\n–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", "success");
  } catch (error) {
    logger.error(error.message, "error");
    if (process.env.DEBUG === 'true') {
      logger.error("Stack trace:", error.stack);
    }
    process.exit(1);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
async function analyzeFile(chat, filePath, checks, shouldAutofix) {
  try {
    const fileStats = await fs.stat(filePath);
    const code = await fs.readFile(filePath, "utf8");

    logger.info("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:");
    logger.info(`- –ò–º—è: ${path.basename(filePath)}`);
    logger.info(`- –†–∞–∑–º–µ—Ä: ${(fileStats.size / 1024).toFixed(2)} KB`);
    logger.info(`- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${code.split("\n").length}`);
    logger.info(`- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${fileStats.mtime}`);

    const results = {
      issues: 0,
      warnings: 0,
      suggestions: 0,
    };

    logger.info("\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:");
    checks.forEach((check) => {
      logger.info(`‚úì ${analyzeCommands[check].desc}`);
    });

    for (let i = 0; i < checks.length; i++) {
      const check = checks[i];
      showProgress(i + 1, checks.length, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫");

      logger.info(`\n‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ${analyzeCommands[check].desc}...`);

      if (check === "perf") {
        await analyzePerformance(chat, code);
      } else if (check === "sec") {
        await analyzeSecurityIssues(chat, code);
      } else {
        const result = await chat.sendMessage(`
          –í—ã–ø–æ–ª–Ω–∏ ${analyzeCommands[check].desc} –¥–ª—è —Ñ–∞–π–ª–∞ ${path.basename(
          filePath
        )}:
          ${analyzeCommands[check].sections.map((s) => `- ${s}`).join("\n")}
          
          –ö–æ–¥:
          ${code}

          –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
          {
            "issues": [—Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º],
            "warnings": [—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π],
            "suggestions": [—Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π],
            "analysis": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
          }
        `);

        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const analysisResult = result.response.text();
        try {
          const parsed = JSON.parse(analysisResult);
          results.issues += parsed.issues?.length || 0;
          results.warnings += parsed.warnings?.length || 0;
          results.suggestions += parsed.suggestions?.length || 0;
        } catch {
          logger.info("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", analysisResult);
        }
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("\nüìä –ò—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞:");
    logger.info(`- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${results.issues}`);
    logger.info(`- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${results.warnings}`);
    logger.info(`- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${results.suggestions}`);

    if (shouldAutofix) {
      logger.info("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...");
      await generateFixes(chat, code, "all");
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`, "error");
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º main –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ CLI
async function main() {
  try {
    if (processArgs.length > 0) {
      const { command, options } = parseCLIArgs(processArgs);

      const genAI = new GoogleGenerativeAI(API_KEY);
      const model = genAI.getGenerativeModel({ model: MODEL_NAME });
      const chat = model.startChat({
        generationConfig: { maxOutputTokens: 2048 },
        safetySettings: [
          {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
          },
        ],
      });

      switch (command) {
        case "analyze-batch":
          await handleBatchAnalysis(chat, processArgs.slice(1).join(" "));
          break;
        case "analyze":
          if (options.paths.length === 1) {
            const code = await fs.readFile(options.paths[0], "utf8");
            await analyzeCode(
              chat,
              code,
              options.autofix,
              path.basename(options.paths[0])
            );
          }
          break;
        case "help":
          await showHelp();
          break;
        default:
          logger.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:", command);
          process.exit(1);
      }
      rl.close();
      return;
    }

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    logger.info("\nü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini AI Assistant!");

    while (true) {
      logger.info("\n=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===");
      logger.info("1. üí≠ Chat —Ä–µ–∂–∏–º");
      logger.info("2. üöÄ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å");
      logger.info("3. üëã –í—ã—Ö–æ–¥");

      const choice = await promptUser("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ");

      switch (choice) {
        case "1":
          await runChat();
          break;
        case "2":
          const prompt = await promptUser("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å: ");
          await makeDirectRequest(prompt);
          break;
        case "3":
          logger.info("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
          rl.close();
          return;
        default:
          logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    }
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    rl.close();
  }
}

main();
  info: (message) => console.log(`‚ÑπÔ∏è ${message}`),
  error: (message) => console.error(`‚ùå ${error.message}`),
  warn: (message) => console.warn(`‚ö†Ô∏è ${message}`),
  debug: (message) => console.debug(`üîç ${message}`),
  success: (message) => console.log(`‚úÖ ${message}`),
};

module.exports = logger;
¬©