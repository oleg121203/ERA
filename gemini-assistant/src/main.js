const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const readline = require('readline');
require('dotenv').config();

const MODEL_NAME = "gemini-pro";
const API_KEY = process.env.GEMINI_API_KEY;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const helpCommands = {
  '/help': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
  '/code': '–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞',
  '/explain': '–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é',
  '/exit': '–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
};

async function showHelp() {
  console.log("\n=== –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===");
  Object.entries(helpCommands).forEach(([cmd, desc]) => {
    console.log(`${cmd}: ${desc}`);
  });
}

async function handleCodeGeneration(chat) {
  console.log("\n=== –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ ===");
  console.log("–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å");
  
  const prompt = await promptUser("üñ•Ô∏è –ó–∞–¥–∞–Ω–∏–µ: ");
  const result = await chat.sendMessage(`Generate code: ${prompt}`);
  console.log("\n```\n" + result.response.text() + "\n```\n");
}

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function runChat() {
  try {
    console.log("\n=== –†–µ–∂–∏–º —á–∞—Ç–∞ —Å Gemini AI ===");
    console.log("–ü–æ–¥—Å–∫–∞–∑–∫–∏:");
    console.log("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥");
    console.log("- /code –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞");
    console.log("- /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é\n");

    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });
    const chat = model.startChat({
      generationConfig: { maxOutputTokens: 2048 },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        },
      ],
    });

    while (true) {
      const prompt = await promptUser("\nü§ñ –í–∞—à –∑–∞–ø—Ä–æ—Å: ");
      
      switch(prompt.toLowerCase()) {
        case '/help':
          await showHelp();
          break;
        case '/code':
          await handleCodeGeneration(chat);
          break;
        case '/exit':
          return;
        default:
          console.log("\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...");
          const result = await chat.sendMessage(prompt);
          console.log("\nüìù –û—Ç–≤–µ—Ç:\n" + result.response.text() + "\n");
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
}

async function makeDirectRequest(prompt) {
  try {
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        })
      }
    );
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error("Error in makeDirectRequest:", error);
  }
}

async function main() {
  try {
    console.log("\nü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini AI Assistant!");
    
    while (true) {
      console.log("\n=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===");
      console.log("1. üí≠ Chat —Ä–µ–∂–∏–º");
      console.log("2. üöÄ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å");
      console.log("3. üëã –í—ã—Ö–æ–¥");
      
      const choice = await promptUser("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ");
      
      switch (choice) {
        case "1":
          await runChat();
          break;
        case "2":
          const prompt = await promptUser("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å: ");
          await makeDirectRequest(prompt);
          break;
        case "3":
          console.log("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
          rl.close();
          return;
        default:
          console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    rl.close();
  }
}

main();