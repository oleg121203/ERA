const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const readline = require('readline');
require('dotenv').config();

const MODEL_NAME = "gemini-pro";
const API_KEY = process.env.GEMINI_API_KEY;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const args = process.argv.slice(2);

const helpCommands = {
  '/help': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
  '/code': '–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞',
  '/explain': '–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é',
  '/exit': '–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
};

// –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
const ANALYSIS_TYPES = {
  '--basic': '–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑',
  '--deep': '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑',
  '--security': '–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
  '--imports': '–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤',
  '--structure': '–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
  '--deps': '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
  '--complexity': '–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
  '--tests': '–ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤',
  '--docs': '–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
  '--scale': '–ê–Ω–∞–ª–∏–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏',
  '--api': '–ê–Ω–∞–ª–∏–∑ API',
  '--smells': 'Code smells',
  '--debt': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥',
  '--memory': '–£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏',
  '--perf': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
  '--all': '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
};

async function showHelp() {
  console.log("\n=== –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===");
  Object.entries(helpCommands).forEach(([cmd, desc]) => {
    console.log(`${cmd}: ${desc}`);
  });
}

async function handleCodeGeneration(chat) {
  console.log("\n=== –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ ===");
  console.log("–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å");
  
  const prompt = await promptUser("üñ•Ô∏è –ó–∞–¥–∞–Ω–∏–µ: ");
  const result = await chat.sendMessage(`Generate code: ${prompt}`);
  console.log("\n```\n" + result.response.text() + "\n```\n");
}

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function runChat() {
  try {
    console.log("\n=== –†–µ–∂–∏–º —á–∞—Ç–∞ —Å Gemini AI ===");
    console.log("–ü–æ–¥—Å–∫–∞–∑–∫–∏:");
    console.log("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥");
    console.log("- /code –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞");
    console.log("- /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é\n");

    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });
    const chat = model.startChat({
      generationConfig: { maxOutputTokens: 2048 },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        },
      ],
    });

    while (true) {
      const prompt = await promptUser("\nü§ñ –í–∞—à –∑–∞–ø—Ä–æ—Å: ");
      
      switch(prompt.toLowerCase()) {
        case '/help':
          await showHelp();
          break;
        case '/code':
          await handleCodeGeneration(chat);
          break;
        case '/exit':
          return;
        default:
          console.log("\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...");
          const result = await chat.sendMessage(prompt);
          console.log("\nüìù –û—Ç–≤–µ—Ç:\n" + result.response.text() + "\n");
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
}

async function makeDirectRequest(prompt) {
  try {
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        })
      }
    );
    const data = await response.json();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
    if (data.candidates && data.candidates[0]) {
      console.log("\nüìù –û—Ç–≤–µ—Ç:");
      console.log(data.candidates[0].content.parts[0].text);
      
      console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
      console.log(`–¢–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ: ${data.usageMetadata.promptTokenCount}`);
      console.log(`–¢–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: ${data.usageMetadata.candidatesTokenCount}`);
      console.log(`–ú–æ–¥–µ–ª—å: ${data.modelVersion}\n`);
    } else {
      console.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
async function handleCodeAnalysis(chat, options) {
  const targetPath = options.path;
  const depth = parseInt(options.depth) || 3;
  const fixThreshold = parseInt(options.fix) || 0;
  const analysisTypes = options.types || ['--basic'];

  // –ü—Ä–∏–º–µ—Ä —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞
  // const files = options.recursive
  //   ? await getAllFilesRecursive(targetPath)
  //   : [targetPath];

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–ø—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞
function parseAnalysisOptions(params) {
  const options = {
    path: params[0],
    types: [],
    fix: 0,
    depth: 0,
    recursive: false
  };

  return options;
}

async function main() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º chat –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });
    const chat = model.startChat({
      generationConfig: { maxOutputTokens: 2048 },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        },
      ],
    });

    if (args.length > 0) {
      const [command, ...params] = args;
      
      switch(command) {
        case 'chat':
          await runChat();
          break;
        case 'direct':
          await makeDirectRequest(params.join(' '));
          break;
        case 'code':
          await handleCodeGeneration(chat);
          break;
        case 'analyze':
          const options = parseAnalysisOptions(params);
          await handleCodeAnalysis(chat, options);
          break;
        default:
          console.log("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: chat, direct, code, analyze");
      }
      rl.close();
      return;
    }

    console.log("\nü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini AI Assistant!");
    
    while (true) {
      console.log("\n=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===");
      console.log("1. üí≠ Chat —Ä–µ–∂–∏–º");
      console.log("2. üöÄ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å");
      console.log("3. üëã –í—ã—Ö–æ–¥");
      
      const choice = await promptUser("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ");
      
      switch (choice) {
        case "1":
          await runChat();
          break;
        case "2":
          const prompt = await promptUser("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å: ");
          await makeDirectRequest(prompt);
          break;
        case "3":
          console.log("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
          rl.close();
          return;
        default:
          console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    rl.close();
  }
}

main();

/*
–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–º:
node src/main.js analyze ./src --recursive --fix=75 --all

2. –ê–Ω–∞–ª–∏–∑ –¥–æ 2 —É—Ä–æ–≤–Ω—è:
node src/main.js analyze ./src --depth=2 --basic --security

3. –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
node src/main.js analyze ./src/main.js --file --complexity --fix=90
*/