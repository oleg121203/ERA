const path = require("path");
const dotenv = require("dotenv");
const fetch = require("node-fetch");
const logger = require('../utils/logger');

dotenv.config({ path: path.resolve(__dirname, "../../.env") });

if (dotenv.error) {
  logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: ${dotenv.error.message}`);
}

const config = {
  apiKey: process.env.GEMINI_API_KEY,
  modelName: "gemini-pro",
  endpoint: "https://generativelanguage.googleapis.com/v1beta",

  async validate() {
    if (!this.apiKey) {
      logger.error("‚ùå GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ");
      return false;
    }

    const maskedKey = `${this.apiKey.substring(0, 6)}...${this.apiKey.slice(-4)}`;
    logger.log(`üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ${maskedKey}`);

    try {
      const url = `${this.endpoint}/models/gemini-pro?key=${this.apiKey}`;
      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${response.statusText}`);
      }

      logger.log("‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω");
      return true;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞: ${error}`);
      return false;
    }
  },

  getApiUrl(model = "gemini-pro") {
    return `${this.endpoint}/models/${model}:generateContent?key=${this.apiKey}`;
  },
};

module.exports = config;
