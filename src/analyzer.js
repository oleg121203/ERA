const { ANALYSIS_TYPES, FORMATTERS } = require("./constants");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { execSync } = require("child_process");
const path = require("path");
const fs = require("fs").promises;
const config = require("./config/gemini.config");

class CodeAnalyzer {
  constructor(chat, options = {}) {
    this.chat = chat;
    this.options = options;
    this.genAI = new GoogleGenerativeAI(config.apiKey);
    this.fixes = [];
  }

  async analyze(code, options) {
    const results = [];
    const types = this.parseTypes(options.types);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥
    if (options.format) {
      await this.formatCode(code);
    }

    for (const { type, metrics } of types) {
      if (!ANALYSIS_TYPES[type]) {
        console.log(`Skipping unknown type: ${type}`);
        continue;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      const specificChecks = await this.runSpecificChecks(code, type);
      const analysis = await this.analyzeByType(code, type, metrics);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω autoApply
      if (options.autoApply && analysis.confidence >= options.fix) {
        console.log(`üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞: ${type}`);
        const fixes = await this.applyFixes(code, specificChecks, type);
        analysis.appliedFixes = fixes;
      }

      results.push({
        ...analysis,
        specificChecks,
        formattingApplied: options.format,
        fixesApplied: this.fixes.length,
      });
    }
    return results;
  }

  parseTypes(types) {
    if (!types || types.length === 0) {
      return [{ type: "--basic", metrics: {} }];
    }

    const analysisTypes = types.map((typeStr) => {
      const [typeRaw, metricsStr] = typeStr.split(":");
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '--' –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const type = typeRaw.replace(/^--/, "");
      return {
        type: `--${type}`, // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        metrics: this.parseMetrics(metricsStr),
      };
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–ª–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const hasBase = analysisTypes.some(
      (t) => t.type === "--basic" || t.type === "--deep",
    );

    if (!hasBase) {
      analysisTypes.unshift({ type: "--basic", metrics: {} });
    }

    return analysisTypes;
  }

  parseMetrics(metricsStr) {
    if (!metricsStr) return {};

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫
    const regex = /(\w+)=(\d+)/g;
    const metrics = {};
    let match;
    while ((match = regex.exec(metricsStr)) !== null) {
      metrics[match[1]] = parseInt(match[2], 10);
    }
    return metrics;
  }

  async analyzeByType(code, type, metrics = {}) {
    const typeConfig = ANALYSIS_TYPES[type];

    try {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (typeConfig.formatters && this.options.format) {
        await this.applyFormatters(type, typeConfig.formatters);
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç
      const prompt = this.buildPrompt(code, typeConfig, metrics);
      if (!prompt.trim()) {
        throw new Error("Empty prompt generated");
      }

      const model = this.genAI.getGenerativeModel({ 
        model: config.modelName,
        apiEndpoint: config.endpoint 
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const result = await model.generateContent(prompt);
      const response = await result.response;

      if (!response) {
        throw new Error("Empty response from AI");
      }

      return {
        type,
        analysis: response.text(),
        confidence: typeConfig.metrics.confidence.CERTAIN,
        impact: typeConfig.metrics.impact.CRITICAL,
        priority: typeConfig.metrics.priority.IMMEDIATE,
      };
    } catch (error) {
      console.error(`Error in analyzeByType for type ${type}:`, error.message);
      return {
        type,
        analysis: `Analysis failed: ${error.message}`,
        confidence: typeConfig.metrics.confidence.CERTAIN,
        impact: typeConfig.metrics.impact.CRITICAL,
        priority: typeConfig.metrics.priority.IMMEDIATE,
        error: true,
      };
    }
  }

  async applyFormatters(type, formatters) {
    console.log(`üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è ${type}...`);
    const filePath = this.options.filePath;
    const extension = path.extname(filePath);

    for (const formatter of formatters) {
      const config = FORMATTERS[formatter];
      if (config && config.extensions.includes(extension)) {
        try {
          console.log(`   Running ${formatter}...`);
          const command = `${config.command} ${config.args.join(" ")} "${filePath}"`;
          execSync(command, { stdio: "pipe" });
          console.log(`   ‚úÖ ${formatter} completed`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è  Formatter ${formatter} failed:`, error.message);
        }
      }
    }
  }

  getFilePath(code, specifiedPath) {
    // –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    return specifiedPath || "src/main.js"; // –ü—Ä–∏–º–µ—Ä
  }

  buildPrompt(code, typeConfig, metrics = {}) {
    // –£–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–¥–∞
    const sanitizedCode = this.sanitizeCode(code);

    const prompt = [
      "Analyze the following code:",
      "",
      `Analysis type: ${typeConfig.name}`,
      `Focus: ${typeConfig.desc}`,
      "",
      "Code:",
      "```javascript",
      sanitizedCode,
      "```",
      "",
      "Provide a technical analysis covering:",
      "1. Code quality score (0-100)",
      "2. Specific issues found",
      "3. Concrete improvement suggestions",
      "4. Code examples for fixes",
      typeConfig.depth === "deep" ? "5. Architecture recommendations" : "",
      "",
      "Format response as valid JSON",
    ]
      .filter(Boolean)
      .join("\n");

    return prompt;
  }

  sanitizeCode(code) {
    // –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return code
      .replace(/const API_KEY\s*=\s*["'].*["']/g, 'const API_KEY = "***"')
      .replace(/password\s*:\s*["'].*["']/g, 'password: "***"');
  }

  parseResult(result, type) {
    if (!result?.response) {
      throw new Error("Invalid analysis result");
    }

    const typeConfig = ANALYSIS_TYPES[type];
    return {
      type,
      analysis: result.response.text(),
      confidence: typeConfig.metrics.confidence.CERTAIN,
      impact: typeConfig.metrics.impact.CRITICAL,
      priority: typeConfig.metrics.priority.IMMEDIATE,
    };
  }

  async runSpecificChecks(code, type) {
    const checks = {};

    if (type === "--security") {
      checks.sqlInjection = this.checkSQLInjection(code);
      checks.xss = this.checkXSS(code);
      checks.unsafeEval = this.checkUnsafeEval(code);
    } else if (type === "--performance") {
      checks.complexity = this.checkComplexity(code);
      checks.memoryUsage = this.checkMemoryUsage(code);
    }

    return checks;
  }

  checkSQLInjection(code) {
    const risks = [];
    if (code.includes("executeQuery(") && !code.includes("prepared")) {
      risks.push("Possible SQL injection: Use prepared statements");
    }
    return risks;
  }

  checkXSS(code) {
    const risks = [];
    if (
      code.includes("innerHTML") ||
      code.includes("dangerouslySetInnerHTML")
    ) {
      risks.push("XSS risk: Use safe DOM manipulation methods");
    }
    return risks;
  }

  checkUnsafeEval(code) {
    const risks = [];
    if (code.includes("eval(") || code.includes("new Function(")) {
      risks.push("Unsafe eval: Consider alternative approaches");
    }
    return risks;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ checkComplexity
  checkComplexity(code) {
    const complexities = [];
    const complexityMatches = code.match(/function\s+\w+\s*\(/g) || [];
    complexities.push(`–ù–∞–π–¥–µ–Ω–æ ${complexityMatches.length} —Ñ—É–Ω–∫—Ü–∏–π.`);
    return complexities;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ checkMemoryUsage
  checkMemoryUsage(code) {
    const memoryIssues = [];
    const memoryPatterns = [
      /process\.memoryUsage\(\)/g,
      /new\s+Buffer\(/g,
      /new\s+ArrayBuffer\(/g,
    ];

    memoryPatterns.forEach((pattern) => {
      let match;
      while ((match = pattern.exec(code)) !== null) {
        memoryIssues.push(
          `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ${match[0].replace(/\(/, "")} –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã—Å–æ–∫–∏–º —Ä–∞—Å—Ö–æ–¥–∞–º –ø–∞–º—è—Ç–∏.`,
        );
      }
    });

    return memoryIssues;
  }

  async applyFixes(code, checks, type) {
    const fixes = [];
    const filePath = this.options.filePath;

    try {
      if (type === "--security") {
        for (const [checkName, risks] of Object.entries(checks)) {
          if (risks.length > 0) {
            const fix = await this.getSecurityFix(code, checkName, risks);
            if (fix && fix.fixedCode) {
              // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ñ–∞–π–ª—É
              await fs.writeFile(filePath, fix.fixedCode, 'utf8');
              fixes.push({
                type: checkName,
                risks,
                applied: true,
                timestamp: new Date().toISOString()
              });
            }
          }
        }
      } else if (type === "--performance") {
        const performanceFix = await this.getPerformanceFix(code, checks);
        if (performanceFix) {
          await fs.writeFile(filePath, performanceFix.fixedCode, 'utf8');
          fixes.push(performanceFix);
        }
      }

      if (fixes.length > 0) {
        console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${fixes.length}`);
        this.fixes.push(...fixes);
      }

      return fixes;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }

  async getSecurityFix(code, checkName, risks) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const prompt = [
      "Please provide a specific code fix for the following security issue:",
      `Issue type: ${checkName}`,
      `Risks identified: ${risks.join(", ")}`,
      "Original code:",
      "```javascript",
      code,
      "```",
      "Provide only the fixed code without explanations.",
    ].join("\n");

    const result = await this.chat.sendMessage(prompt);
    return {
      type: checkName,
      risks,
      fixedCode: result.response.text(),
    };
  }

  async getPerformanceFix(code, checks) {
    if (checks.complexity.length === 0 && checks.memoryUsage.length === 0) {
      return null;
    }

    const prompt = [
      "Optimize the following code for performance:",
      "```javascript",
      code,
      "```",
      "Issues to address:",
      ...checks.complexity,
      ...checks.memoryUsage
    ].join("\n");

    try {
      const result = await this.chat.sendMessage(prompt);
      return {
        type: 'performance',
        issues: [...checks.complexity, ...checks.memoryUsage],
        fixedCode: result.response.text(),
        applied: true,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:', error);
      return null;
    }
  }

  async formatCode(code) {
    const filePath = this.options.filePath;
    console.log(`\nüîß –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filePath}`);
    const extension = path.extname(filePath);

    for (const [name, config] of Object.entries(FORMATTERS)) {
      try {
        if (config.extensions.includes(extension)) {
          console.log(`   –ü—Ä–∏–º–µ–Ω—è–µ–º ${name}...`);
          const command = `${config.command} ${config.args.join(" ")} "${filePath}"`;
          execSync(command, { stdio: "pipe" });
          console.log(`   ‚úÖ ${name} completed`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –§–æ—Ä–º–∞—Ç—Ç–µ—Ä ${name} failed:`, error.message);
      }
    }
  }
}

module.exports = CodeAnalyzer;
