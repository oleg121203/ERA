require("dotenv").config();
const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const readline = require("readline");
const fs = require("fs").promises;
const path = require("path");
const fetch = require("node-fetch");
const CodeAnalyzer = require("./analyzer");
const { ANALYSIS_TYPES } = require("./constants");
const { testGeminiAPI } = require("../tests/test-api");
const config = require("./config/gemini.config");
const logger = require('./utils/logger');

const MODEL_NAME = config.modelName;
const API_KEY = config.apiKey;
logger.log(`GEMINI_API_KEY: ${API_KEY}`);
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});
const args = process.argv.slice(2);

function showHelp() {
  console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
  console.log("/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥");
  console.log("/code - —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞");
}

function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function runChat() {
  try {
    const genAI = new GoogleGenerativeAI({ apiKey: API_KEY });
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });
    const chat = await model.startChat({
      generationConfig: {
        maxOutputTokens: 2048,
        temperature: 0.7,
        topP: 0.8,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        },
      ],
    });

    while (true) {
      const prompt = await promptUser("–í–∞—à –∑–∞–ø—Ä–æ—Å: ");
      if (prompt === "/help") {
        showHelp();
      } else if (prompt === "/code") {
        await handleCodeGeneration(chat);
      } else {
        const result = await chat.sendMessage(prompt);
        console.log(result.response.text());
      }
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞: ${error}`);
  }
}

async function makeDirectRequest(prompt) {
  try {
    const response = await fetch(config.getApiUrl(), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig: {
          temperature: 0.7,
          topP: 0.8,
          maxOutputTokens: 2048,
        },
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return (
      data?.candidates?.[0]?.content?.parts?.[0]?.text || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ"
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error}`);
    throw error;
  }
}

async function getAllFilesRecursive(dir) {
  const files = [];
  const scan = async (currentPath) => {
    try {
      const entries = await fs.readdir(currentPath, { withFileTypes: true });
      for (const entry of entries) {
        const fullPath = path.join(currentPath, entry.name);
        if (entry.isDirectory()) {
          await scan(fullPath);
        } else if (entry.name.endsWith(".js")) {
          files.push(fullPath);
        }
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ${currentPath}: ${error.message}`);
    }
  };

  try {
    await fs.access(dir);
    await scan(dir);
    return files;
  } catch (error) {
    throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
  }
}

function parseAnalysisOptions(args) {
  const options = {
    types: [],
    fix: 70,
    recursive: false,
    autoApply: false,
    format: false,
    backup: true, // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –±—ç–∫–∞–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  };

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    if (arg.startsWith("--types=")) {
      const typesStr = arg.replace("--types=", "");
      console.log("üìù –ü–æ–ª—É—á–µ–Ω—ã —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:", typesStr);
      options.types = typesStr;
    } else if (arg === "--recursive") {
      options.recursive = true;
    } else if (arg === "--auto-apply") {
      options.autoApply = true;
    } else if (arg === "--format") {
      options.format = true;
    } else if (arg.startsWith("--fix=")) {
      options.fix = parseInt(arg.split("=")[1], 10);
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ --fix
      options.autoApply = true;
      console.log(
        `üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${options.fix} (autoApply –≤–∫–ª—é—á–µ–Ω)`,
      );
    }
  }

  return options;
}

async function validateApiKey() {
  try {
    console.log("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
    if (!API_KEY || !/^AIza[0-9A-Za-z-_]{35}$/.test(API_KEY)) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞");
    }

    if (!(await config.validate())) {
      throw new Error("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á");
    }
    return true;
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API: ${error.message}`);
    console.log("\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:");
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "AIza")');
    console.log("2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ API –≤ Google Cloud Console");
    console.log("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –∫–ª—é—á–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Gemini API");
    return false;
  }
}

async function handleCodeAnalysis(chat, args) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
    if (!(await validateApiKey())) {
      process.exit(1);
    }

    const options = parseAnalysisOptions(args);
    const targetPath = options.filePath || args[0] || ".";
    const files = options.recursive
      ? await getAllFilesRecursive(targetPath)
      : [targetPath];

    console.log(`\nüìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      console.log(`\nüìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (${i + 1}/${files.length}): ${file}`);

      const code = await fs.readFile(file, "utf8");
      const analyzer = new CodeAnalyzer(chat, { ...options, filePath: file }); // –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø—Ü–∏–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
      const results = await analyzer.analyze(code, options);

      console.log("\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ñ–∞–π–ª—É:");
      console.log(JSON.stringify(results, null, 2));
      console.log("üîé –ó–∞–≤–µ—Ä—à—ë–Ω –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:", file);
    }

    console.log("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω");
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    if (error.message.includes("API")) {
      console.log("\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:");
      console.log("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É");
      console.log("2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —É –∫–ª—é—á–∞");
      console.log("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å endpoint URL");
    }
    process.exit(1);
  }
}

async function main() {
  if (args.length > 0) {
    const [command, ...commandArgs] = args;

    try {
      const genAI = new GoogleGenerativeAI({ apiKey: API_KEY });
      const model = genAI.getGenerativeModel({ model: MODEL_NAME });
      const chat = await model.startChat({
        generationConfig: { maxOutputTokens: 2048 },
        safetySettings: [
          {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
          },
        ],
      });

      switch (command) {
        case "analyze":
          await handleCodeAnalysis(chat, commandArgs);
          break;
        case "chat":
          await runChat();
          break;
        case "direct":
          await makeDirectRequest(args.slice(1).join(" "));
          break;
        case "code":
          handleCodeGeneration();
          break;
        default:
          console.log(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: chat, direct, code, analyze",
          );
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞: ${error}`);
    }
    rl.close();
  } else {
    console.log("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini AI Assistant!");
    while (true) {
      console.log("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");
      console.log("1. Chat —Ä–µ–∂–∏–º");
      console.log("2. –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å");
      console.log("3. –í—ã—Ö–æ–¥");

      const choice = await promptUser("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ");
      switch (choice) {
        case "1":
          await runChat();
          break;
        case "2":
          const prompt = await promptUser("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å: ");
          await makeDirectRequest(prompt);
          break;
        case "3":
          console.log("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
          rl.close();
          return;
        default:
          console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    }
  }
}

main().catch(console.error);
