import { workspace, Uri } from 'vscode';
import axios from 'axios';
const logger = require('../utils/logger');

export async function isWritable(uri: Uri): Promise<boolean> {
    try {
        return await workspace.fs.canWriteFile(uri);
    } catch {
        return false;
    }
}

export async function setReadonly(uri: Uri, readonly: boolean): Promise<void> {
    try {
        const edit = new WorkspaceEdit();
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ readonly —Ä–µ–∂–∏–º–∞
        await workspace.applyEdit(edit);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        logger.log(`üîí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º ${readonly ? 'readonly' : 'writable'} –¥–ª—è —Ñ–∞–π–ª–∞: ${uri.fsPath}`);
    } catch (err) {
        logger.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ readonly –¥–ª—è —Ñ–∞–π–ª–∞ ${uri.fsPath}: ${err}`);
        throw err;
    }
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function createFile(uri: Uri, content: string): Promise<void> {
    try {
        await workspace.fs.writeFile(uri, Buffer.from(content, 'utf8'));
        logger.log(`üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${uri.fsPath}`);
    } catch (err) {
        logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${uri.fsPath}: ${err}`);
        throw err;
    }
}
