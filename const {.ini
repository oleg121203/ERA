const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const readline = require('readline');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();
const CodeAnalyzer = require('./analyzer');
const { ANALYSIS_TYPES } = require('./constants');

const MODEL_NAME = "gemini-pro";
const API_KEY = process.env.GEMINI_API_KEY;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const args = process.argv.slice(2);

const helpCommands = {
  '/help': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
  '/code': '–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞',
  '/explain': '–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é',
  '/exit': '–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
};

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
const INTERACTIVE_FLAGS = ['-i', '--interactive'];

async function showHelp() {
  console.log("\n=== –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===");
  Object.entries(helpCommands).forEach(([cmd, desc]) => {
    console.log(`${cmd}: ${desc}`);
  });
}

async function handleCodeGeneration(chat) {
  console.log("\n=== –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ ===");
  console.log("–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å");
  
  const prompt = await promptUser("üñ•Ô∏è –ó–∞–¥–∞–Ω–∏–µ: ");
  const result = await chat.sendMessage(`Generate code: ${prompt}`);
  console.log("\n```\n" + result.response.text() + "\n```\n");
}

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function runChat() {
  try {
    console.log("\n=== –†–µ–∂–∏–º —á–∞—Ç–∞ —Å Gemini AI ===");
    console.log("–ü–æ–¥—Å–∫–∞–∑–∫–∏:");
    console.log("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥");
    console.log("- /code –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞");
    console.log("- /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é\n");

    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });
    const chat = model.startChat({
      generationConfig: { maxOutputTokens: 2048 },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        },
      ],
    });

    while (true) {
      const prompt = await promptUser("\nü§ñ –í–∞—à –∑–∞–ø—Ä–æ—Å: ");
      
      switch(prompt.toLowerCase()) {
        case '/help':
          await showHelp();
          break;
        case '/code':
          await handleCodeGeneration(chat);
          break;
        case '/exit':
          return;
        default:
          console.log("\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...");
          const result = await chat.sendMessage(prompt);
          console.log("\nüìù –û—Ç–≤–µ—Ç:\n" + result.response.text() + "\n");
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
}

async function makeDirectRequest(prompt) {
  try {
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        })
      }
    );
    const data = await response.json();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
    if (data.candidates && data.candidates[0]) {
      console.log("\nüìù –û—Ç–≤–µ—Ç:");
      console.log(data.candidates[0].content.parts[0].text);
      
      console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
      console.log(`–¢–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ: ${data.usageMetadata.promptTokenCount}`);
      console.log(`–¢–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: ${data.usageMetadata.candidatesTokenCount}`);
      console.log(`–ú–æ–¥–µ–ª—å: ${data.modelVersion}\n`);
    } else {
      console.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getAllFilesRecursive —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function getAllFilesRecursive(dir) {
  const files = [];
  
  async function scan(currentPath) {
    try {
      const entries = await fs.readdir(currentPath, { withFileTypes: true });
      
      for (const entry of entries) {
        const fullPath = path.join(currentPath, entry.name);
        if (entry.isDirectory()) {
          await scan(fullPath);
        } else if (entry.name.endsWith('.js')) {
          files.push(fullPath);
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ${currentPath}:`, error.message);
    }
  }
  
  try {
    await fs.access(dir); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await scan(dir);
    return files;
  } catch (error) {
    throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleCodeAnalysis
async function handleCodeAnalysis(chat, options, interactiveOptions = null) {
  try {
    const targetPath = options.path || '.'; // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const depth = options.depth || 3;
    const fixThreshold = options.fix || 70; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ 70%
    const analysisTypes = options.types || ['--basic'];

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    let files = [];
    if (options.recursive) {
      console.log('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...');
      files = await getAllFilesRecursive(targetPath);
    } else {
      const stat = await fs.stat(targetPath);
      files = stat.isDirectory() ? 
        (await fs.readdir(targetPath)).map(f => path.join(targetPath, f)) :
        [targetPath];
    }

    console.log(`\nüìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const progress = Math.round((i + 1) / files.length * 100);
      
      if (interactiveOptions?.interactive) {
        interactiveOptions.onProgress(path.basename(file), progress);
      }

      console.log(`\nüìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (${i + 1}/${files.length}): ${file}`);
      
      try {
        const code = await fs.readFile(file, 'utf8');
        const analyzer = new CodeAnalyzer(chat);
        const result = await analyzer.analyze(code, { types: analysisTypes });
        
        if (interactiveOptions?.interactive) {
          interactiveOptions.onResult(path.basename(file), result);
        } else {
          console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
          console.log(result);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–º
        const confidentResults = result.filter(r => r.confidence >= fixThreshold);
        if (confidentResults.length > 0 && result.some(r => r.priority >= fixThreshold)) {
          console.log(`\nüîß –ê–≤—Ç–æ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∞–π–ª–∞ ${file}`);
          
          const fixPrompt = `
            –ò—Å–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ:
            ${confidentResults.map(r => r.analysis).join('\n')}
            
            –ö–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
            ${code}
            
            –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
          `;
          
          const fixResult = await chat.sendMessage(fixPrompt);
          const fixedCode = fixResult.response.text();
          
          console.log('\nüìù –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
          console.log(fixedCode);
          
          const shouldApply = await promptUser('\n‚úîÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è? (y/n): ');
          if