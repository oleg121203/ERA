node ‚ûú /workspaces/ERA (app) $ node src/main.js analyze /workspaces/ERA/.devcontainer/extension.ts \
  --basic \
  --lang=typescript
GEMINI_API_KEY: AIzaSyCDXOtzi7lrTIv8307xNUgGrFd16NFy8zg
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ***y8zg
–û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω: —É—Å–ø–µ—à–Ω–æ

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 1

üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (1/1): /workspaces/ERA/.devcontainer/extension.ts

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:
[
  {
    "type": "--basic",
    "analysis": "```json\n{\n  \"analysisResult\": {\n    \"codeQualityScore\": 70,\n    \"issuesFound\": [\n      {\n        \"issueCode\": \"VSC001\",\n        \"issueDescription\": \"Using `*` for imports is discouraged. Use specific imports instead.\",\n        \"improvementSuggestion\": \"Use specific imports, e.g. `import { WorkspaceEdit } from 'vscode';` instead of `import * as vscode from 'vscode';`\",\n        \"codeExample\": \"```javascript\\nimport { WorkspaceEdit } from 'vscode';\\n\\nlet disposable = vscode.commands.registerCommand(\\\"era.toggleReadonly\\\", () => {\\n  const editor = vscode.window.activeTextEditor;\\n  if (!editor) return;\\n\\n  const document = editor.document;\\n  const uri = document.uri;\\n\\n  // –ò—Å–ø–æ–ª—å–∑—É–µ–º WorkspaceEdit –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è readonly\\n  const edit = new WorkspaceEdit();\\n  const currentReadonly = vscode.workspace.fs.isWritableFileSystem(\\n    uri.scheme,\\n  );\\n\\n  if (currentReadonly) {\\n    edit.createFile(uri, { overwrite: true, ignoreIfExists: true });\\n  }\\n\\n  vscode.workspace.applyEdit(edit).then(() => {\\n    vscode.window.showInformationMessage(\\n      `Readonly mode ${currentReadonly ? \\\"enabled\\\" : \\\"disabled\\\"}`,\\n    );\\n  });\\n});\\n\\ncontext.subscriptions.push(disposable);\\n```\"\n      },\n      {\n        \"issueCode\": \"VSC002\",\n        \"issueDescription\": \"Avoid using global variables. Declare variables with `const`, `let`, or `var` keywords.\",\n        \"improvementSuggestion\": \"Declare `autoLockTimeout` variable with `let` keyword.\",\n        \"codeExample\": \"```javascript\\nlet autoLockTimeout;\\n\\nexport function activate(context: vscode.ExtensionContext) {\\n  let disposable = vscode.commands.registerCommand(\\\"era.toggleReadonly\\\", () => {\\n    const editor = vscode.window.activeTextEditor;\\n    if (!editor) return;\\n\\n    const document = editor.document;\\n    const uri = document.uri;\\n\\n    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WorkspaceEdit –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è readonly\\n    const edit = new vscode.WorkspaceEdit();\\n    const currentReadonly = vscode.workspace.fs.isWritableFileSystem(\\n      uri.scheme,\\n    );\\n\\n    if (currentReadonly) {\\n      edit.createFile(uri, { overwrite: true, ignoreIfExists: true });\\n    }\\n\\n    vscode.workspace.applyEdit(edit).then(() => {\\n      vscode.window.showInformationMessage(\\n        `Readonly mode ${currentReadonly ? \\\"enabled\\\" : \\\"disabled\\\"}`,\\n      );\\n    });\\n  });\\n\\n  context.subscriptions.push(disposable);\\n}\\n\\nexport function deactivate() {\\n  if (autoLockTimeout) {\\n    clearTimeout(autoLockTimeout);\\n  }\\n}\\n```\"\n      }\n    ],\n    \"improvementSuggestions\": [],\n    \"codeExamples\": []\n  }\n}\n```",
    "confidence": 90,
    "impact": 80,
    "priority": 85,
    "specificChecks": {},
    "formattingApplied": false,
    "fixesApplied": 0
  }
]

‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
node ‚ûú /workspaces/ERA (app) $ node src/main.js analyze /workspaces/ERA/.devcontainer/extension.ts \
  --types=security,performance \
  --fix=80 \
  --auto-apply \
  --ts-config=/workspaces/ERA/tsconfig.json
GEMINI_API_KEY: AIzaSyCDXOtzi7lrTIv8307xNUgGrFd16NFy8zg
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ***y8zg
–û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω: —É—Å–ø–µ—à–Ω–æ

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 1

üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (1/1): /workspaces/ERA/.devcontainer/extension.ts
üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞: --basic
üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞: --security
üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞: --performance
–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: GoogleGenerativeAIFetchError: [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent: [400 Bad Request] API key not valid. Please pass a valid API key. [{"@type":"type.googleapis.com/google.rpc.ErrorInfo","reason":"API_KEY_INVALID","domain":"googleapis.com","metadata":{"service":"generativelanguage.googleapis.com"}},{"@type":"type.googleapis.com/google.rpc.LocalizedMessage","locale":"en-US","message":"API key not valid. Please pass a valid API key."}]
    at handleResponseNotOk (/workspaces/ERA/node_modules/@google/generative-ai/dist/index.js:414:11)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async makeRequest (/workspaces/ERA/node_modules/@google/generative-ai/dist/index.js:387:9)
    at async generateContent (/workspaces/ERA/node_modules/@google/generative-ai/dist/index.js:832:22)
    at async ChatSession.sendMessage (/workspaces/ERA/node_modules/@google/generative-ai/dist/index.js:1146:9)
    at async CodeAnalyzer.getPerformanceFix (/workspaces/ERA/src/analyzer.js:366:22)
    at async CodeAnalyzer.applyFixes (/workspaces/ERA/src/analyzer.js:310:32)
    at async CodeAnalyzer.analyze (/workspaces/ERA/src/analyzer.js:38:23)
    at async handleCodeAnalysis (/workspaces/ERA/src/main.js:185:23)
    at async main (/workspaces/ERA/src/main.js:216:11) {
  status: 400,
  statusText: 'Bad Request',
  errorDetails: [
    {
      '@type': 'type.googleapis.com/google.rpc.ErrorInfo',
      reason: 'API_KEY_INVALID',
      domain: 'googleapis.com',
      metadata: [Object]
    },
    {
      '@type': 'type.googleapis.com/google.rpc.LocalizedMessage',
      locale: 'en-US',
      message: 'API key not valid. Please pass a valid API key.'
    }
  ]
}

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:
[
  {
    "type": "--basic",
    "analysis": "```json\n{\n  \"codeQualityScore\": 75,\n  \"specificIssuesFound\": [\n    {\n      \"issue\": \"Use of `then` callback in `applyEdit` is not ideal.\",\n      \"location\": \"Line 20: `vscode.workspace.applyEdit(edit).then(() => {`\",\n      \"suggestion\": \"Use an async/await pattern instead.\"\n    }\n  ],\n  \"concreteImprovementSuggestions\": [\n    {\n      \"suggestion\": \"Refactor `applyEdit` usage to use async/await.\",\n      \"codeExample\": `\ntry {\n  await vscode.workspace.applyEdit(edit);\n  vscode.window.showInformationMessage(\n    \"Readonly mode ${currentReadonly ? \"enabled\" : \"disabled\"}\",\n  );\n} catch (err) {\n  console.error(err);\n  vscode.window.showErrorMessage(\"Failed to toggle readonly mode.\");\n}\n        `\n    }\n  ]\n}\n```",
    "confidence": 90,
    "impact": 80,
    "priority": 85,
    "appliedFixes": [],
    "specificChecks": {},
    "formattingApplied": false,
    "fixesApplied": 0
  },
  {
    "type": "--security",
    "analysis": "```json\n{\n  \"security_analysis\": {\n    \"code_quality_score\": 60,\n    \"findings\": [\n      {\n        \"issue\": \"Insecure FileSystem API\",\n        \"description\": \"The code uses the built-in FileSystem API, which is considered insecure and can lead to arbitrary file read or write vulnerabilities. It's recommended to use the secure file system API instead.\",\n        \"fix\": \"Replace the insecure `vscode.workspace.fs` API with the secure `vscode.workspace.fs.secure` API.\"\n      }\n    ],\n    \"improvement_suggestions\": [\n      {\n        \"suggestion\": \"Use a more secure API\",\n        \"description\": \"The `vscode.workspace.fs` API is considered insecure and should be replaced with the more secure `vscode.workspace.fs.secure` API.\"\n      }\n    ],\n    \"code_examples\": [\n      {\n        \"original\": `\n        vscode.workspace.fs.isWritableFileSystem(uri.scheme)`,\n        \"fixed\": `\n        vscode.workspace.fs.secure.isWritableFileSystem(uri.scheme)`\n      }\n    ]\n  }\n}\n```",
    "confidence": 95,
    "impact": 90,
    "priority": 90,
    "appliedFixes": [],
    "specificChecks": {
      "sqlInjection": [],
      "xss": [],
      "unsafeEval": []
    },
    "formattingApplied": false,
    "fixesApplied": 0
  },
  {
    "type": "--performance",
    "analysis": "```json\n{\n  \"codeQualityScore\": 50,\n  \"specificIssuesFound\": [\n    {\n      \"issueType\": \"Performance Issue\",\n      \"location\": \"Line 15\",\n      \"description\": \"Using `vscode.workspace.applyEdit` to toggle readonly mode is inefficient.\"\n    }\n  ],\n  \"concreteImprovementSuggestions\": [\n    {\n      \"suggestionType\": \"Use `vscode.workspace.fs.writeFile` instead of `vscode.workspace.applyEdit`\",\n      \"codeExample\": `\n      const editor = vscode.window.activeTextEditor;\n      if (!editor) return;\n\n      const document = editor.document;\n      const uri = document.uri;\n\n      // Use `vscode.workspace.fs.writeFile` to toggle readonly\n      const currentReadonly = vscode.workspace.fs.isWritableFileSystem(uri.scheme);\n      if (currentReadonly) {\n        vscode.workspace.fs.writeFile(uri, \"\");\n      }\n\n      vscode.window.showInformationMessage(\\`Readonly mode ${currentReadonly ? \"enabled\" : \"disabled\"}\\`);\n      `\n    }\n  ]\n}\n```",
    "confidence": 90,
    "impact": 85,
    "priority": 85,
    "appliedFixes": [],
    "specificChecks": {
      "complexity": [
        "–ù–∞–π–¥–µ–Ω–æ 2 —Ñ—É–Ω–∫—Ü–∏–π."
      ],
      "memoryUsage": []
    },
    "formattingApplied": false,
    "fixesApplied": 0
  }
]

‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
node ‚ûú /workspaces/ERA (app) $ node src/main.js analyze /workspaces/ERA/.devcontainer/extension.ts \
  --types=basic,security,performance \
  --metrics \
  --fix=80 \
  --format \
  --strict
GEMINI_API_KEY: AIzaSyCDXOtzi7lrTIv8307xNUgGrFd16NFy8zg
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ***y8zg
–û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω: —É—Å–ø–µ—à–Ω–æ

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 1

üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (1/1): /workspaces/ERA/.devcontainer/extension.ts

üîß –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: /workspaces/ERA/.devcontainer/extension.ts
   –ü—Ä–∏–º–µ–Ω—è–µ–º prettier-vscode...
   ‚úÖ prettier-vscode completed
   –ü—Ä–∏–º–µ–Ω—è–µ–º eslint...
   ‚úÖ eslint completed
   –ü—Ä–∏–º–µ–Ω—è–µ–º typescript...
‚ö†Ô∏è  –§–æ—Ä–º–∞—Ç—Ç–µ—Ä typescript failed: Command failed: tsc --noEmit "/workspaces/ERA/.devcontainer/extension.ts"
üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è --basic...
   Running prettier-vscode...
   ‚úÖ prettier-vscode completed
   Running eslint...
   ‚úÖ eslint completed

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:
[
  {
    "type": "--basic",
    "analysis": "```json\n{\n  \"codeQualityScore\": 60,\n  \"specificIssuesFound\": [\n    {\n      \"description\": \"Unused variable `currentReadonly`\",\n      \"location\": {\n        \"startLine\": 20,\n        \"startColumn\": 28\n      }\n    }\n  ],\n  \"concreteImprovementSuggestions\": [\n    {\n      \"description\": \"Remove unused variable\",\n      \"codeExample\": `\n        vscode.workspace.applyEdit(edit).then(() => {\n          vscode.window.showInformationMessage(\n            \\`Readonly mode \\${currentReadonly ? \"enabled\" : \"disabled\"}\\`,\n          );\n        });\n      `\n    }\n  ],\n  \"codeExamplesForFixes\": [\n    {\n      \"description\": \"Fixed code\",\n      \"codeExample\": `\n        import * as vscode from \"vscode\";\n\nlet autoLockTimeout: NodeJS.Timeout | undefined;\n\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand(\"era.toggleReadonly\", () => {\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) return;\n\n    const document = editor.document;\n    const uri = document.uri;\n\n    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WorkspaceEdit –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è readonly\n    const edit = new vscode.WorkspaceEdit();\n    \n    const currentReadonly = vscode.workspace.fs.isWritableFileSystem(\n      uri.scheme,\n    );\n\n    if (currentReadonly) {\n      edit.createFile(uri, { overwrite: true, ignoreIfExists: true });\n    }\n\n    vscode.workspace.applyEdit(edit).then(() => {\n      vscode.window.showInformationMessage(\n        \\`Readonly mode \\${currentReadonly ? \"enabled\" : \"disabled\"}\\`,\n      );\n    });\n  });\n\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {\n  if (autoLockTimeout) {\n    clearTimeout(autoLockTimeout);\n  }\n}\n      `\n    }\n  ]\n}\n```",
    "confidence": 90,
    "impact": 80,
    "priority": 85,
    "specificChecks": {},
    "formattingApplied": true,
    "fixesApplied": 0
  },
  {
    "type": "--security",
    "analysis": "```json\n{\n  \"codeQualityScore\": 70,\n  \"specificIssuesFound\": [],\n  \"concreteImprovementSuggestions\": [],\n  \"codeExamplesForFixes\": []\n}\n```",
    "confidence": 95,
    "impact": 90,
    "priority": 90,
    "specificChecks": {
      "sqlInjection": [],
      "xss": [],
      "unsafeEval": []
    },
    "formattingApplied": true,
    "fixesApplied": 0
  },
  {
    "type": "--performance",
    "analysis": "```json\n{\n  \"codeQualityScore\": 60,\n  \"specificIssuesFound\": [\n    {\n      \"issueType\": \"Performance Bottleneck\",\n      \"location\": \"toggleReadonly function\",\n      \"description\": \"The toggleReadonly function performs a synchronous file write operation, which can block the UI thread and cause performance issues.\"\n    }\n  ],\n  \"concreteImprovementSuggestions\": [\n    {\n      \"suggestionType\": \"Use asynchronous file operations\",\n      \"location\": \"toggleReadonly function\",\n      \"description\": \"Use asynchronous file operations, such as fs.writeFile(), to avoid blocking the UI thread.\"\n    }\n  ],\n  \"codeExamplesForFixes\": [\n    {\n      \"codeExample\": `\nimport * as vscode from \"vscode\";\nimport * as fs from \"fs\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand(\"era.toggleReadonly\", () => {\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) return;\n\n    const document = editor.document;\n    const uri = document.uri;\n\n    // Use asynchronous file operations to avoid blocking the UI thread\n    const currentReadonly = vscode.workspace.fs.isWritableFileSystem(uri.scheme);\n\n    if (currentReadonly) {\n      fs.writeFile(uri.fsPath, \"\", { overwrite: true }, (err) => {\n        if (err) {\n          vscode.window.showErrorMessage(\"Error updating file: \" + err.message);\n        } else {\n          vscode.window.showInformationMessage(\n            \"Readonly mode enabled\"\n          );\n        }\n      });\n    } else {\n      fs.unlink(uri.fsPath, (err) => {\n        if (err) {\n          vscode.window.showErrorMessage(\"Error updating file: \" + err.message);\n        } else {\n          vscode.window.showInformationMessage(\n            \"Readonly mode disabled\"\n          );\n        }\n      });\n    }\n  });\n\n  context.subscriptions.push(disposable);\n}\n      `,\n      \"description\": \"This code example shows how to use asynchronous file operations to avoid blocking the UI thread.\"\n    }\n  ]\n}\n```",
    "confidence": 90,
    "impact": 85,
    "priority": 85,
    "specificChecks": {
      "complexity": [
        "–ù–∞–π–¥–µ–Ω–æ 2 —Ñ—É–Ω–∫—Ü–∏–π."
      ],
      "memoryUsage": []
    },
    "formattingApplied": true,
    "fixesApplied": 0
  }
]

‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
node ‚ûú /workspaces/ERA (app) $ # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
node src/main.js analyze /workspaces/ERA/.devcontainer \
  --interactive \
  --metrics \
  --depth=2 \
  --include="**/*.ts" \
  --exclude="node_modules"
GEMINI_API_KEY: AIzaSyCDXOtzi7lrTIv8307xNUgGrFd16NFy8zg
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ***y8zg
–û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω: —É—Å–ø–µ—à–Ω–æ

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 1

üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (1/1): /workspaces/ERA/.devcontainer
‚ùå –û—à–∏–±–∫–∞: EISDIR: illegal operation on a directory, read
node ‚ûú /workspaces/ERA (app) $ 

node ‚ûú /workspaces/ERA (app) $ node src/main.js analyze /workspaces/ERA/.devcontainer/extension.ts \
  --types=basic \
  --metrics=confidence=90:impact=80:priority=85
GEMINI_API_KEY: AIzaSyCDXOtzi7lrTIv8307xNUgGrFd16NFy8zg
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ***y8zg
–û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω: —É—Å–ø–µ—à–Ω–æ

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 1

üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (1/1): /workspaces/ERA/.devcontainer/extension.ts

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:
[
  {
    "type": "--basic",
    "analysis": "```json\n{\n  \"codeQualityScore\": 70,\n  \"specificIssuesFound\": [\n    {\n      \"issue\": \"Using * as namespace import\",\n      \"description\": \"Importing the entire vscode namespace is not recommended as it can lead to naming conflicts and make the code harder to read.\",\n      \"fix\": \"Use specific imports instead, e.g. import {commands, window, WorkspaceEdit} from 'vscode';\"\n    },\n    {\n      \"issue\": \"Comparison of booleans without using strict equality\",\n      \"description\": \"Comparing booleans without using the strict equality operator (===) can lead to unexpected results.\",\n      \"fix\": \"Use `currentReadonly === false` to compare booleans correctly.\"\n    }\n  ],\n  \"concreteImprovementSuggestions\": [\n    {\n      \"suggestion\": \"Use more descriptive variable names\",\n      \"example\": \"Instead of `const uri = document.uri;`, use `const documentUri = document.uri;`.\"\n    },\n    {\n      \"suggestion\": \"Follow consistent naming conventions\",\n      \"example\": \"Use camelCase for variable and function names, e.g. `toggleReadonly` instead of `toggleReadonly`.\"\n    }\n  ],\n  \"codeExamplesForFixes\": [\n    {\n      \"original\": `const currentReadonly = vscode.workspace.fs.isWritableFileSystem(uri.scheme);`,\n      \"fixed\": `const isWritable = vscode.workspace.fs.isWritableFileSystem(uri.scheme);`\n    },\n    {\n      \"original\": `vscode.window.showInformationMessage(\\`Readonly mode ${currentReadonly ? \"enabled\" : \"disabled\"}\\`);`,\n      \"fixed\": `vscode.window.showInformationMessage(\\`Readonly mode \\${!isWritable ? \"enabled\" : \"disabled\"}\\`);`\n    }\n  ]\n}\n```",
    "confidence": 90,
    "impact": 80,
    "priority": 85,
    "specificChecks": {},
    "formattingApplied": false,
    "fixesApplied": 0
  }
]

‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
node ‚ûú /workspaces/ERA (app) $ node src/main.js analyze /workspaces/ERA/.devcontainer/extension.ts \
  --types=deep,performance \
  --fix=80 \
  --auto-apply
GEMINI_API_KEY: AIzaSyCDXOtzi7lrTIv8307xNUgGrFd16NFy8zg
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ***y8zg
–û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω: —É—Å–ø–µ—à–Ω–æ

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 1

üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (1/1): /workspaces/ERA/.devcontainer/extension.ts
üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞: --deep
üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞: --performance
–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: GoogleGenerativeAIFetchError: [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent: [400 Bad Request] API key not valid. Please pass a valid API key. [{"@type":"type.googleapis.com/google.rpc.ErrorInfo","reason":"API_KEY_INVALID","domain":"googleapis.com","metadata":{"service":"generativelanguage.googleapis.com"}},{"@type":"type.googleapis.com/google.rpc.LocalizedMessage","locale":"en-US","message":"API key not valid. Please pass a valid API key."}]
    at handleResponseNotOk (/workspaces/ERA/node_modules/@google/generative-ai/dist/index.js:414:11)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async makeRequest (/workspaces/ERA/node_modules/@google/generative-ai/dist/index.js:387:9)
    at async generateContent (/workspaces/ERA/node_modules/@google/generative-ai/dist/index.js:832:22)
    at async ChatSession.sendMessage (/workspaces/ERA/node_modules/@google/generative-ai/dist/index.js:1146:9)
    at async CodeAnalyzer.getPerformanceFix (/workspaces/ERA/src/analyzer.js:366:22)
    at async CodeAnalyzer.applyFixes (/workspaces/ERA/src/analyzer.js:310:32)
    at async CodeAnalyzer.analyze (/workspaces/ERA/src/analyzer.js:38:23)
    at async handleCodeAnalysis (/workspaces/ERA/src/main.js:185:23)
    at async main (/workspaces/ERA/src/main.js:216:11) {
  status: 400,
  statusText: 'Bad Request',
  errorDetails: [
    {
      '@type': 'type.googleapis.com/google.rpc.ErrorInfo',
      reason: 'API_KEY_INVALID',
      domain: 'googleapis.com',
      metadata: [Object]
    },
    {
      '@type': 'type.googleapis.com/google.rpc.LocalizedMessage',
      locale: 'en-US',
      message: 'API key not valid. Please pass a valid API key.'
    }
  ]
}

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:
[
  {
    "type": "--deep",
    "analysis": "```json\n{\n  \"codeQualityScore\": 75,\n  \"issues\": [\n    {\n      \"description\": \"The variable `uri` is declared twice in the `activate` function, which is unnecessary and can lead to confusion.\",\n      \"location\": {\n        \"file\": \"extension.js\",\n        \"line\": 11\n      }\n    },\n    {\n      \"description\": \"The `createFile` method is called with the `overwrite` option set to `true`, which can lead to data loss if the file already exists. It's better to use the `fs.writeFile` method instead, which will only overwrite the file if it doesn't exist.\",\n      \"location\": {\n        \"file\": \"extension.js\",\n        \"line\": 18\n      }\n    },\n    {\n      \"description\": \"The `autoLockTimeout` variable is declared globally, which can lead to namespace pollution and conflicts with other variables in the extension. It's better to declare the variable locally in the `activate` function.\",\n      \"location\": {\n        \"file\": \"extension.js\",\n        \"line\": 7\n      }\n    },\n    {\n      \"description\": \"The `deactivate` function doesn't dispose of the `disposable` object created in the `activate` function, which can lead to memory leaks.\",\n      \"location\": {\n        \"file\": \"extension.js\",\n        \"line\": 29\n      }\n    }\n  ],\n  \"improvementSuggestions\": [\n    {\n      \"description\": \"Declare the `uri` variable only once, and use it consistently throughout the function.\",\n      \"example\": `\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) return;\n\n        const document = editor.document;\n        const uri = document.uri;\n      `\n    },\n    {\n      \"description\": \"Use the `fs.writeFile` method instead of the `createFile` method to avoid overwriting existing files.\",\n      \"example\": `\n        vscode.workspace.fs.writeFile(uri, \"\").then(() => {\n          vscode.window.showInformationMessage(\n            \\`Readonly mode \\${currentReadonly ? \"enabled\" : \"disabled\"}\\`,\n          );\n        });\n      `\n    },\n    {\n      \"description\": \"Declare the `autoLockTimeout` variable locally in the `activate` function to avoid namespace pollution.\",\n      \"example\": `\n        export function activate(context: vscode.ExtensionContext) {\n          let autoLockTimeout: NodeJS.Timeout | undefined;\n          let disposable = vscode.commands.registerCommand(\"era.toggleReadonly\", () => {\n            // ...\n          });\n          context.subscriptions.push(disposable);\n        }\n      `\n    },\n    {\n      \"description\": \"Dispose of the `disposable` object created in the `activate` function in the `deactivate` function to avoid memory leaks.\",\n      \"example\": `\n        export function deactivate() {\n          if (autoLockTimeout) {\n            clearTimeout(autoLockTimeout);\n          }\n          disposable.dispose();\n        }\n      `\n    }\n  ],\n  \"architectureRecommendations\": [\n    {\n      \"description\": \"Consider using a state management library, such as Redux or MobX, to manage the state of the extension. This will help to keep the code organized and easier to maintain.\",\n      \"example\": `\n        import { createStore } from \"redux\";\n\n        const store = createStore(reducer);\n\n        vscode.commands.registerCommand(\"era.toggleReadonly\", () => {\n          const action = { type: \"TOGGLE_READONLY\" };\n          store.dispatch(action);\n        });\n\n        store.subscribe(() => {\n          const state = store.getState();\n          // Update the UI based on the state...\n        });\n      `\n    },\n    {\n      \"description\": \"Consider using a dependency injection framework, such as Inversion of Control Containers (IoC), to manage the dependencies of the extension. This will help to make the code more modular and easier to test.\",\n      \"example\": `\n        // Register the dependencies in the IoC container.\n        ioc.register(\"fs\", vscode.workspace.fs);\n        ioc.register(\"editor\", vscode.window.activeTextEditor);\n\n        // Inject the dependencies into the command handler.\n        const commandHandler = ioc.resolve(\"CommandHandler\");\n\n        vscode.commands.registerCommand(\"era.toggleReadonly\", commandHandler.toggleReadonly);\n      `\n    }\n  ]\n}\n```",
    "confidence": 95,
    "impact": 90,
    "priority": 90,
    "appliedFixes": [],
    "specificChecks": {},
    "formattingApplied": false,
    "fixesApplied": 0
  },
  {
    "type": "--performance",
    "analysis": "```json\n{\n  \"codeQualityScore\": 50,\n  \"specificIssuesFound\": [\n    {\n      \"issue\": \"The code is using `vscode.workspace.fs.isWritableFileSystem` to check if a file is readonly. This method is deprecated and should be replaced with `vscode.workspace.fs.canWriteFile`.\"\n    },\n    {\n      \"issue\": \"The code is using `vscode.workspace.applyEdit` to change the readonly state of a file. This method is not recommended for use in extensions and should be replaced with `vscode.workspace.openTextDocument` and `vscode.TextDocument.save`.\"\n    }\n  ],\n  \"concreteImprovementSuggestions\": [\n    {\n      \"suggestion\": \"Replace `vscode.workspace.fs.isWritableFileSystem` with `vscode.workspace.fs.canWriteFile`.\"\n    },\n    {\n      \"suggestion\": \"Replace `vscode.workspace.applyEdit` with `vscode.workspace.openTextDocument` and `vscode.TextDocument.save`.\"\n    }\n  ],\n  \"codeExamplesForFixes\": [\n    {\n      \"before\": `\n        const currentReadonly = vscode.workspace.fs.isWritableFileSystem(\n          uri.scheme,\n        );\n      `,\n      \"after\": `\n        const currentReadonly = vscode.workspace.fs.canWriteFile(uri);\n      `\n    },\n    {\n      \"before\": `\n        vscode.workspace.applyEdit(edit).then(() => {\n          vscode.window.showInformationMessage(\n            \\`Readonly mode ${currentReadonly ? \"enabled\" : \"disabled\"}`,\n          );\n        });\n      `,\n      \"after\": `\n        vscode.workspace.openTextDocument(uri).then(document => {\n          document.save().then(() => {\n            vscode.window.showInformationMessage(\n              \\`Readonly mode ${currentReadonly ? \"enabled\" : \"disabled\"}`,\n            );\n          });\n        });\n      `\n    }\n  ]\n}\n```",
    "confidence": 90,
    "impact": 85,
    "priority": 85,
    "appliedFixes": [],
    "specificChecks": {
      "complexity": [
        "–ù–∞–π–¥–µ–Ω–æ 2 —Ñ—É–Ω–∫—Ü–∏–π."
      ],
      "memoryUsage": []
    },
    "formattingApplied": false,
    "fixesApplied": 0
  }
]

‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
node ‚ûú /workspaces/ERA (app) $ 

node ‚ûú /workspaces/ERA (app) $ node src/main.js analyze /workspaces/ERA/.devcontainer/extension.ts \
  --types=security \
  --format
GEMINI_API_KEY: AIzaSyCDXOtzi7lrTIv8307xNUgGrFd16NFy8zg
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ***y8zg
–û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω: —É—Å–ø–µ—à–Ω–æ

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 1

üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (1/1): /workspaces/ERA/.devcontainer/extension.ts

üîß –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: /workspaces/ERA/.devcontainer/extension.ts
   –ü—Ä–∏–º–µ–Ω—è–µ–º prettier-vscode...
   ‚úÖ prettier-vscode completed
   –ü—Ä–∏–º–µ–Ω—è–µ–º eslint...
   ‚úÖ eslint completed
   –ü—Ä–∏–º–µ–Ω—è–µ–º typescript...
‚ö†Ô∏è  –§–æ—Ä–º–∞—Ç—Ç–µ—Ä typescript failed: Command failed: tsc --noEmit "/workspaces/ERA/.devcontainer/extension.ts"
üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è --basic...
   Running prettier-vscode...
   ‚úÖ prettier-vscode completed
   Running eslint...
   ‚úÖ eslint completed

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:
[
  {
    "type": "--basic",
    "analysis": "```json\n{\n  \"codeQualityScore\": 70,\n  \"specificIssuesFound\": [\n    {\n      \"issue\": \"The code does not define a variable type for `disposable` variable.\",\n      \"location\": \"Line 7\"\n    },\n    {\n      \"issue\": \"The code does not define a variable type for `currentReadonly` variable.\",\n      \"location\": \"Line 17\"\n    },\n    {\n      \"issue\": \"The code does not define a variable type for `uri` variable.\",\n      \"location\": \"Line 14\"\n    },\n    {\n      \"issue\": \"The code does not define a variable type for `document` variable.\",\n      \"location\": \"Line 13\"\n    },\n    {\n      \"issue\": \"The code does not define a variable type for `editor` variable.\",\n      \"location\": \"Line 12\"\n    },\n    {\n      \"issue\": \"The code does not include error handling for the `vscode.workspace.fs.isWritableFileSystem` call.\",\n      \"location\": \"Line 17\"\n    },\n    {\n      \"issue\": \"The code does not specify the file format when calling `createFile`\",\n      \"location\": \"Line 20\"\n    },\n    {\n      \"issue\": \"The code does not handle the case where the file is already open and the user tries to toggle the readonly mode.\",\n      \"location\": \"Line 12\"\n    },\n    {\n      \"issue\": \"The code does not handle the case where the user tries to toggle the readonly mode on a file that is not writable.\",\n      \"location\": \"Line 17\"\n    },\n    {\n      \"issue\": \"The code does not handle the case where the user tries to toggle the readonly mode on a file that is not a regular file.\",\n      \"location\": \"Line 17\"\n    }\n  ],\n  \"concreteImprovementSuggestions\": [\n    {\n      \"suggestion\": \"Define a variable type for `disposable` variable.\",\n      \"code\": \"let disposable: vscode.Disposable = vscode.commands.registerCommand(\\\"era.toggleReadonly\\\", () => {\"\n    },\n    {\n      \"suggestion\": \"Define a variable type for `currentReadonly` variable.\",\n      \"code\": \"const currentReadonly: boolean = vscode.workspace.fs.isWritableFileSystem(uri.scheme);\"\n    },\n    {\n      \"suggestion\": \"Use the `vscode.Uri.parse` function to create a `Uri` object to ensure the proper file format is used.\",\n      \"code\": \"const uri = vscode.Uri.parse(document.uri.toString());\"\n    },\n    {\n      \"suggestion\": \"Include error handling for the `vscode.workspace.fs.isWritableFileSystem` call.\",\n      \"code\": \"try {\\n  const currentReadonly = vscode.workspace.fs.isWritableFileSystem(uri.scheme); \\n} catch (err) {\\n  console.error(err);\\n}\"\n    },\n    {\n      \"suggestion\": \"Specify the desired file format when calling `createFile`.\",\n      \"code\": \"edit.createFile(uri, { content: \\\"\\\", overwrite: true, ignoreIfExists: true });\"\n    },\n    {\n      \"suggestion\": \"Handle the case where the file is already open and the user tries to toggle the readonly mode.\",\n      \"code\": \"const editor = vscode.window.activeTextEditor;\\nif (!editor) {\\n  vscode.window.showInformationMessage(\\\"No active text editor\\\");\\n  return;\\n}\"\n    },\n    {\n      \"suggestion\": \"Handle the case where the user tries to toggle the readonly mode on a file that is not writable.\",\n      \"code\": \"if (!currentReadonly) {\\n  vscode.window.showInformationMessage(\\\"The file is not writable\\\");\\n  return;\\n}\"\n    },\n    {\n      \"suggestion\": \"Handle the case where the user tries to toggle the readonly mode on a file that is not a regular file.\",\n      \"code\": \"if (!vscode.workspace.fs.isFile(uri)) {\\n  vscode.window.showInformationMessage(\\\"The file is not a regular file\\\");\\n  return;\\n}\"\n    }\n  ],\n  \"codeExamplesForFixes\": [\n    {\n      \"issue\": \"The code does not define a variable type for `disposable` variable.\",\n      \"code\": \"let disposable: vscode.Disposable = vscode.commands.registerCommand(\\\"era.toggleReadonly\\\", () => {\"\n    },\n    {\n      \"issue\": \"The code does not define a variable type for `currentReadonly` variable.\",\n      \"code\": \"const currentReadonly: boolean = vscode.workspace.fs.isWritableFileSystem(uri.scheme);\"\n    },\n    {\n      \"issue\": \"The code does not define a variable type for `uri` variable.\",\n      \"code\": \"const uri = vscode.Uri.parse(document.uri.toString());\"\n    },\n    {\n      \"issue\": \"The code does not include error handling for the `vscode.workspace.fs.isWritableFileSystem` call.\",\n      \"code\": \"try {\\n  const currentReadonly = vscode.workspace.fs.isWritableFileSystem(uri.scheme); \\n} catch (err) {\\n  console.error(err);\\n}\"\n    },\n    {\n      \"issue\": \"The code does not specify the file format when calling `createFile`.\",\n      \"code\": \"edit.createFile(uri, { content: \\\"\\\", overwrite: true, ignoreIfExists: true });\"\n    },\n    {\n      \"issue\": \"The code does not handle the case where the file is already open and the user tries to toggle the readonly mode.\",\n      \"code\": \"const editor = vscode.window.activeTextEditor;\\nif (!editor) {\\n  vscode.window.showInformationMessage(\\\"No active text editor\\\");\\n  return;\\n}\"\n    },\n    {\n      \"issue\": \"The code does not handle the case where the user tries to toggle the readonly mode on a file that is not writable.\",\n      \"code\": \"if (!currentReadonly) {\\n  vscode.window.showInformationMessage(\\\"The file is not writable\\\");\\n  return;\\n}\"\n    },\n    {\n      \"issue\": \"The code does not handle the case where the user tries to toggle the readonly mode on a file that is not a regular file.\",\n      \"code\": \"if (!vscode.workspace.fs.isFile(uri)) {\\n  vscode.window.showInformationMessage(\\\"The file is not a regular file\\\");\\n  return;\\n}\"\n    }\n  ]\n}\n```",
    "confidence": 90,
    "impact": 80,
    "priority": 85,
    "specificChecks": {},
    "formattingApplied": true,
    "fixesApplied": 0
  },
  {
    "type": "--security",
    "analysis": "```json\n{\n  \"codeQualityScore\": 40,\n  \"specificIssuesFound\": [\n    {\n      \"issueType\": \"Potential Security Vulnerability\",\n      \"description\": \"The code does not perform any input validation or sanitization, which could potentially allow an attacker to execute arbitrary commands or inject malicious code. This is especially concerning given that the code is using the `vscode.workspace.fs` module, which provides access to the file system.\",\n      \"codeSnippet\": \"```javascript\\nconst uri = document.uri;\\nconst edit = new vscode.WorkspaceEdit();\\nconst currentReadonly = vscode.workspace.fs.isWritableFileSystem(\\n  uri.scheme,\\n);\\n\\nif (currentReadonly) {\\n  edit.createFile(uri, { overwrite: true, ignoreIfExists: true });\\n}\\n\\nvscode.workspace.applyEdit(edit).then(() => {\\n  vscode.window.showInformationMessage(\\n    `Readonly mode ${currentReadonly ? \\\"enabled\\\" : \\\"disabled\\\"}`,\\n  );\\n});\\n```\",\n      \"suggestedFix\": \"To fix this issue, the code should validate and sanitize all user input before using it to perform any actions. This can be done using a variety of techniques, such as input filtering, whitelisting, and blacklisting.\"\n    }\n  ],\n  \"concreteImprovementSuggestions\": [\n    {\n      \"suggestion\": \"Use a security library to help prevent common vulnerabilities.\",\n      \"codeExample\": \"```javascript\\nimport * as sanitize from \\\"sanitize-html\\\";\\n\\nconst cleanHtml = sanitize.sanitizeHtml(userInput);\\n```\"\n    },\n    {\n      \"suggestion\": \"Use a linter to help identify potential security issues.\",\n      \"codeExample\": \"```javascript\\n// In your package.json file:\\n{\\n  \\\"scripts\\\": {\\n    \\\"lint\\\": \\\"eslint .\\\"\\n  }\\n}\\n\\n// In your terminal:\\nnpm run lint\\n```\"\n    },\n    {\n      \"suggestion\": \"Educate yourself about common security vulnerabilities.\",\n      \"codeExample\": \"There are many resources available online that can help you learn about common security vulnerabilities and how to prevent them.\"\n    }\n  ]\n}\n```",
    "confidence": 95,
    "impact": 90,
    "priority": 90,
    "specificChecks": {
      "sqlInjection": [],
      "xss": [],
      "unsafeEval": []
    },
    "formattingApplied": true,
    "fixesApplied": 0
  }
]

‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
node ‚ûú /workspaces/ERA (app) $ node src/main.js analyze /workspaces/ERA/.devcontainer \
  --recursive \
  --types=basic,security \
  --metrics=confidence=90:impact=80:priority=85
GEMINI_API_KEY: AIzaSyCDXOtzi7lrTIv8307xNUgGrFd16NFy8zg
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ***y8zg
–û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω: —É—Å–ø–µ—à–Ω–æ

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 0

‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
node ‚ûú /workspaces/ERA (app) $ node src/main.js analyze /workspaces/ERA/.devcontainer   --recursive   --types=basic,security   --metrics=confidence=90:impact=80:priority=85
GEMINI_API_KEY: AIzaSyCDXOtzi7lrTIv8307xNUgGrFd16NFy8zg
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: ***y8zg
–û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω: —É—Å–ø–µ—à–Ω–æ

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 0

‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
node ‚ûú /workspaces/ERA (app) $ 