import prometheus from 'prom-client';

export class MetricsCollector {
  constructor() {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    this.agentOperations = new prometheus.Counter({
      name: 'era_agent_operations_total',
      help: 'Total number of agent operations',
      labelNames: ['agent', 'operation'],
    });

    this.analysisResults = new prometheus.Gauge({
      name: 'era_analysis_results',
      help: 'Analysis results metrics',
      labelNames: ['type', 'metric'],
    });

    this.providerRetries = new prometheus.Counter({
      name: 'era_provider_retries_total',
      help: 'Total number of retries for providers',
      labelNames: ['provider'],
    });

    this.providerErrors = new prometheus.Gauge({
      name: 'era_provider_errors',
      help: 'Number of errors per provider',
      labelNames: ['provider'],
    });

    this.reportMetrics = new prometheus.Gauge({
      name: 'era_report_metrics',
      help: 'Report analysis metrics',
      labelNames: ['category', 'metric'],
    });
  }

  incrementAgentOperations(agent, operation) {
    this.agentOperations.inc({ agent, operation });
  }

  recordAnalysis(results) {
    Object.entries(results).forEach(([type, value]) => {
      this.analysisResults.set({ type, metric: 'value' }, value);
    });
  }

  recordError() {
    this.analysisResults.set({ type: 'error', metric: 'count' }, 1);
  }

  incrementProviderRetries(provider) {
    this.providerRetries.inc({ provider });
  }

  setProviderErrors(provider, count) {
    this.providerErrors.set({ provider }, count);
  }

  recordReportMetrics(report) {
    Object.entries(report.summary).forEach(([key, value]) => {
      this.reportMetrics.set({ category: 'summary', metric: key }, value);
    });

    Object.entries(report.quality).forEach(([key, value]) => {
      if (typeof value === 'number') {
        this.reportMetrics.set({ category: 'quality', metric: key }, value);
      }
    });
  }
}

/**
 * Generates a formatted analysis report.
 * @param {object} results - An object containing analysis results with 'summary', 'quality', 'suggestions', and 'fixes' properties.
 * @throws {Error} If the results object does not contain a 'summary' property.
 */
export function generateAnalysisReport(results) {
  if (!results?.summary) {
    throw new Error('Invalid analysis results structure');
  }

  const { summary, quality, suggestions, fixes } = results;

  return `
${'\x1b[36m'}=== –û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞ ERA ===${'\x1b[0m'}

${'\x1b[32m'}üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${'\x1b[0m'}
- –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${summary.totalFiles}
- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${summary.totalLines}
- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${summary.totalComponents}
- –°–µ—Ä–≤–∏—Å–æ–≤: ${summary.totalServices}
- –£—Ç–∏–ª–∏—Ç: ${summary.totalUtils}
- –ö–æ–º–∞–Ω–¥: ${summary.totalCommands}

${'\x1b[33m'}üîç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:${'\x1b[0m'}
- –û—à–∏–±–∫–∏: ${quality.errors}
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${quality.warnings}
- –ò—Å–ø—Ä–∞–≤–∏–º—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: ${quality.fixableIssues}
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${quality.coverage}

${'\x1b[33m'}–°–ª–æ–∂–Ω–æ—Å—Ç—å:${'\x1b[0m'}
- –í—ã—Å–æ–∫–∞—è: ${quality.complexity.high} —Ñ–∞–π–ª–æ–≤
- –°—Ä–µ–¥–Ω—è—è: ${quality.complexity.medium} —Ñ–∞–π–ª–æ–≤
- –ù–∏–∑–∫–∞—è: ${quality.complexity.low} —Ñ–∞–π–ª–æ–≤

${'\x1b[31m'}‚ùóÔ∏è –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:${'\x1b[0m'}
${(suggestions.critical || []).map((s) => `- ${s}`).join('\n')}

${'\x1b[33m'}‚ö†Ô∏è –í–∞–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:${'\x1b[0m'}
${(suggestions.important || []).map((s) => `- ${s}`).join('\n')}

${'\x1b[33m'}üìù –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:${'\x1b[0m'}
${(suggestions.minor || []).map((s) => `- ${s}`).join('\n')}

${'\x1b[33m'}üîß –°—Ç–∞—Ç—É—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:${'\x1b[0m'}
- –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: ${fixes.applied}
- –û–∂–∏–¥–∞–µ—Ç: ${fixes.pending}
- –ù–µ —É–¥–∞–ª–æ—Å—å: ${fixes.failed}

${'\x1b[36m'}=== –ö–æ–Ω–µ—Ü –æ—Ç—á–µ—Ç–∞ ===${'\x1b[0m'}`;
}
